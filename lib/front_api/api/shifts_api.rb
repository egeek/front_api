=begin
#Core API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module FrontApi
  class ShiftsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add teammates to shift
    # Add teammates to a shift. The selected teammates must be in the team that owns the shift.
    # @param shift_id [String] The Shift ID
    # @param [Hash] opts the optional parameters
    # @option opts [TeammateIds] :teammate_ids Teammate IDs to add. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @return [nil]
    def add_teammates_to_shift(shift_id, opts = {})
      add_teammates_to_shift_with_http_info(shift_id, opts)
      nil
    end

    # Add teammates to shift
    # Add teammates to a shift. The selected teammates must be in the team that owns the shift.
    # @param shift_id [String] The Shift ID
    # @param [Hash] opts the optional parameters
    # @option opts [TeammateIds] :teammate_ids Teammate IDs to add. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_teammates_to_shift_with_http_info(shift_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShiftsApi.add_teammates_to_shift ...'
      end
      # verify the required parameter 'shift_id' is set
      if @api_client.config.client_side_validation && shift_id.nil?
        fail ArgumentError, "Missing the required parameter 'shift_id' when calling ShiftsApi.add_teammates_to_shift"
      end
      # resource path
      local_var_path = '/shift/{shift_id}/teammates'.sub('{' + 'shift_id' + '}', CGI.escape(shift_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'teammate_ids'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ShiftsApi.add_teammates_to_shift",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShiftsApi#add_teammates_to_shift\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create shift
    # Create a shift.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateShift] :create_shift Shift to create details
    # @return [ShiftResponse]
    def create_shift(opts = {})
      data, _status_code, _headers = create_shift_with_http_info(opts)
      data
    end

    # Create shift
    # Create a shift.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateShift] :create_shift Shift to create details
    # @return [Array<(ShiftResponse, Integer, Hash)>] ShiftResponse data, response status code and response headers
    def create_shift_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShiftsApi.create_shift ...'
      end
      # resource path
      local_var_path = '/shifts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_shift'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShiftResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ShiftsApi.create_shift",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShiftsApi#create_shift\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create team shift
    # Create a shift for a team (workspace).
    # @param team_id [String] The Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateShift] :create_shift Shift to create details
    # @return [ShiftResponse]
    def create_team_shift(team_id, opts = {})
      data, _status_code, _headers = create_team_shift_with_http_info(team_id, opts)
      data
    end

    # Create team shift
    # Create a shift for a team (workspace).
    # @param team_id [String] The Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateShift] :create_shift Shift to create details
    # @return [Array<(ShiftResponse, Integer, Hash)>] ShiftResponse data, response status code and response headers
    def create_team_shift_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShiftsApi.create_team_shift ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling ShiftsApi.create_team_shift"
      end
      # resource path
      local_var_path = '/teams/{team_id}/shifts'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_shift'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShiftResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ShiftsApi.create_team_shift",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShiftsApi#create_team_shift\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get shift
    # Fetch a shift.
    # @param shift_id [String] The Shift ID
    # @param [Hash] opts the optional parameters
    # @return [ShiftResponse]
    def get_shift(shift_id, opts = {})
      data, _status_code, _headers = get_shift_with_http_info(shift_id, opts)
      data
    end

    # Get shift
    # Fetch a shift.
    # @param shift_id [String] The Shift ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShiftResponse, Integer, Hash)>] ShiftResponse data, response status code and response headers
    def get_shift_with_http_info(shift_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShiftsApi.get_shift ...'
      end
      # verify the required parameter 'shift_id' is set
      if @api_client.config.client_side_validation && shift_id.nil?
        fail ArgumentError, "Missing the required parameter 'shift_id' when calling ShiftsApi.get_shift"
      end
      # resource path
      local_var_path = '/shift/{shift_id}'.sub('{' + 'shift_id' + '}', CGI.escape(shift_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShiftResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ShiftsApi.get_shift",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShiftsApi#get_shift\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Shifts
    # List the shifts.
    # @param [Hash] opts the optional parameters
    # @return [ListShifts200Response]
    def list_shifts(opts = {})
      data, _status_code, _headers = list_shifts_with_http_info(opts)
      data
    end

    # List Shifts
    # List the shifts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListShifts200Response, Integer, Hash)>] ListShifts200Response data, response status code and response headers
    def list_shifts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShiftsApi.list_shifts ...'
      end
      # resource path
      local_var_path = '/shifts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListShifts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ShiftsApi.list_shifts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShiftsApi#list_shifts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List shift's teammates
    # List the teammates assigned to a shift.
    # @param shift_id [String] The Shift ID
    # @param [Hash] opts the optional parameters
    # @return [ListCommentMentions200Response]
    def list_shifts_teammates(shift_id, opts = {})
      data, _status_code, _headers = list_shifts_teammates_with_http_info(shift_id, opts)
      data
    end

    # List shift&#39;s teammates
    # List the teammates assigned to a shift.
    # @param shift_id [String] The Shift ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListCommentMentions200Response, Integer, Hash)>] ListCommentMentions200Response data, response status code and response headers
    def list_shifts_teammates_with_http_info(shift_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShiftsApi.list_shifts_teammates ...'
      end
      # verify the required parameter 'shift_id' is set
      if @api_client.config.client_side_validation && shift_id.nil?
        fail ArgumentError, "Missing the required parameter 'shift_id' when calling ShiftsApi.list_shifts_teammates"
      end
      # resource path
      local_var_path = '/shift/{shift_id}/teammates'.sub('{' + 'shift_id' + '}', CGI.escape(shift_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCommentMentions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ShiftsApi.list_shifts_teammates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShiftsApi#list_shifts_teammates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List team Shifts
    # List the shifts for a team (workspace).
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @return [ListShifts200Response]
    def list_team_shifts(team_id, opts = {})
      data, _status_code, _headers = list_team_shifts_with_http_info(team_id, opts)
      data
    end

    # List team Shifts
    # List the shifts for a team (workspace).
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListShifts200Response, Integer, Hash)>] ListShifts200Response data, response status code and response headers
    def list_team_shifts_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShiftsApi.list_team_shifts ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling ShiftsApi.list_team_shifts"
      end
      # resource path
      local_var_path = '/teams/{team_id}/shifts'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListShifts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ShiftsApi.list_team_shifts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShiftsApi#list_team_shifts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Teammate Shifts
    # Lists all the shifts for the teammate.
    # @param teammate_id [String] The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @param [Hash] opts the optional parameters
    # @return [ListShifts200Response]
    def list_teammate_shifts(teammate_id, opts = {})
      data, _status_code, _headers = list_teammate_shifts_with_http_info(teammate_id, opts)
      data
    end

    # List Teammate Shifts
    # Lists all the shifts for the teammate.
    # @param teammate_id [String] The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListShifts200Response, Integer, Hash)>] ListShifts200Response data, response status code and response headers
    def list_teammate_shifts_with_http_info(teammate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShiftsApi.list_teammate_shifts ...'
      end
      # verify the required parameter 'teammate_id' is set
      if @api_client.config.client_side_validation && teammate_id.nil?
        fail ArgumentError, "Missing the required parameter 'teammate_id' when calling ShiftsApi.list_teammate_shifts"
      end
      # resource path
      local_var_path = '/teammates/{teammate_id}/shifts'.sub('{' + 'teammate_id' + '}', CGI.escape(teammate_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListShifts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ShiftsApi.list_teammate_shifts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShiftsApi#list_teammate_shifts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove teammates from shift
    # Remove teammates from a shift.
    # @param shift_id [String] The Shift ID
    # @param [Hash] opts the optional parameters
    # @option opts [TeammateIds] :teammate_ids Teammate IDs to remove. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @return [nil]
    def remove_teammates_from_shift(shift_id, opts = {})
      remove_teammates_from_shift_with_http_info(shift_id, opts)
      nil
    end

    # Remove teammates from shift
    # Remove teammates from a shift.
    # @param shift_id [String] The Shift ID
    # @param [Hash] opts the optional parameters
    # @option opts [TeammateIds] :teammate_ids Teammate IDs to remove. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_teammates_from_shift_with_http_info(shift_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShiftsApi.remove_teammates_from_shift ...'
      end
      # verify the required parameter 'shift_id' is set
      if @api_client.config.client_side_validation && shift_id.nil?
        fail ArgumentError, "Missing the required parameter 'shift_id' when calling ShiftsApi.remove_teammates_from_shift"
      end
      # resource path
      local_var_path = '/shift/{shift_id}/teammates'.sub('{' + 'shift_id' + '}', CGI.escape(shift_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'teammate_ids'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ShiftsApi.remove_teammates_from_shift",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShiftsApi#remove_teammates_from_shift\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update shift
    # Update a shift.
    # @param shift_id [String] The Shift ID
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateShift] :update_shift Updated Shift Body
    # @return [nil]
    def update_shift(shift_id, opts = {})
      update_shift_with_http_info(shift_id, opts)
      nil
    end

    # Update shift
    # Update a shift.
    # @param shift_id [String] The Shift ID
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateShift] :update_shift Updated Shift Body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_shift_with_http_info(shift_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShiftsApi.update_shift ...'
      end
      # verify the required parameter 'shift_id' is set
      if @api_client.config.client_side_validation && shift_id.nil?
        fail ArgumentError, "Missing the required parameter 'shift_id' when calling ShiftsApi.update_shift"
      end
      # resource path
      local_var_path = '/shifts/{shift_id}'.sub('{' + 'shift_id' + '}', CGI.escape(shift_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_shift'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ShiftsApi.update_shift",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShiftsApi#update_shift\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
