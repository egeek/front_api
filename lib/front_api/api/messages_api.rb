=begin
#Core API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module FrontApi
  class MessagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create message
    # Send a new message from a channel. This is one of the ways to create a new [conversation](https://dev.frontapp.com/reference/conversations#creating-a-new-conversation). The new conversation will support both messages and comments (discussions).
    # @param channel_id [String] The sending channel ID. Alternatively, you can supply the sending channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @param [Hash] opts the optional parameters
    # @option opts [OutboundMessage] :outbound_message 
    # @return [MessageResponse]
    def create_message(channel_id, opts = {})
      data, _status_code, _headers = create_message_with_http_info(channel_id, opts)
      data
    end

    # Create message
    # Send a new message from a channel. This is one of the ways to create a new [conversation](https://dev.frontapp.com/reference/conversations#creating-a-new-conversation). The new conversation will support both messages and comments (discussions).
    # @param channel_id [String] The sending channel ID. Alternatively, you can supply the sending channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @param [Hash] opts the optional parameters
    # @option opts [OutboundMessage] :outbound_message 
    # @return [Array<(MessageResponse, Integer, Hash)>] MessageResponse data, response status code and response headers
    def create_message_with_http_info(channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagesApi.create_message ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling MessagesApi.create_message"
      end
      # resource path
      local_var_path = '/channels/{channel_id}/messages'.sub('{' + 'channel_id' + '}', CGI.escape(channel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'outbound_message'])

      # return_type
      return_type = opts[:debug_return_type] || 'MessageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"MessagesApi.create_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#create_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create message reply
    # Reply to a conversation by sending a message and appending it to the conversation.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [OutboundReplyMessage] :outbound_reply_message 
    # @return [MessageResponse]
    def create_message_reply(conversation_id, opts = {})
      data, _status_code, _headers = create_message_reply_with_http_info(conversation_id, opts)
      data
    end

    # Create message reply
    # Reply to a conversation by sending a message and appending it to the conversation.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [OutboundReplyMessage] :outbound_reply_message 
    # @return [Array<(MessageResponse, Integer, Hash)>] MessageResponse data, response status code and response headers
    def create_message_reply_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagesApi.create_message_reply ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling MessagesApi.create_message_reply"
      end
      # resource path
      local_var_path = '/conversations/{conversation_id}/messages'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'outbound_reply_message'])

      # return_type
      return_type = opts[:debug_return_type] || 'MessageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"MessagesApi.create_message_reply",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#create_message_reply\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get message
    # Fetch a message.  > ℹ️ The HTTP Header `Accept` can be used to request the message in a different format. > By default, Front will return the documented JSON response. By requesting `message/rfc822`, the response will contain the message in the EML format (for email messages only). 
    # @param message_id [String] The message ID
    # @param [Hash] opts the optional parameters
    # @return [MessageResponse]
    def get_message(message_id, opts = {})
      data, _status_code, _headers = get_message_with_http_info(message_id, opts)
      data
    end

    # Get message
    # Fetch a message.  &gt; ℹ️ The HTTP Header &#x60;Accept&#x60; can be used to request the message in a different format. &gt; By default, Front will return the documented JSON response. By requesting &#x60;message/rfc822&#x60;, the response will contain the message in the EML format (for email messages only). 
    # @param message_id [String] The message ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageResponse, Integer, Hash)>] MessageResponse data, response status code and response headers
    def get_message_with_http_info(message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagesApi.get_message ...'
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling MessagesApi.get_message"
      end
      # resource path
      local_var_path = '/messages/{message_id}'.sub('{' + 'message_id' + '}', CGI.escape(message_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MessageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"MessagesApi.get_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#get_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get message seen status
    # Get the seen receipts for the given message. If no seen-by information is available, there will be a single entry for the first time the message was seen by any recipient. If seen-by information is available, there will be an entry for each recipient who has seen the message.
    # @param message_id [String] The message ID
    # @param [Hash] opts the optional parameters
    # @return [GetMessageSeenStatus200Response]
    def get_message_seen_status(message_id, opts = {})
      data, _status_code, _headers = get_message_seen_status_with_http_info(message_id, opts)
      data
    end

    # Get message seen status
    # Get the seen receipts for the given message. If no seen-by information is available, there will be a single entry for the first time the message was seen by any recipient. If seen-by information is available, there will be an entry for each recipient who has seen the message.
    # @param message_id [String] The message ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMessageSeenStatus200Response, Integer, Hash)>] GetMessageSeenStatus200Response data, response status code and response headers
    def get_message_seen_status_with_http_info(message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagesApi.get_message_seen_status ...'
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling MessagesApi.get_message_seen_status"
      end
      # resource path
      local_var_path = '/messages/{message_id}/seen'.sub('{' + 'message_id' + '}', CGI.escape(message_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMessageSeenStatus200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"MessagesApi.get_message_seen_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#get_message_seen_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import message
    # Import a new message in an inbox.
    # @param inbox_id [String] The Inbox ID
    # @param [Hash] opts the optional parameters
    # @option opts [ImportMessage] :import_message 
    # @return [ReceiveCustomMessages202Response]
    def import_inbox_message(inbox_id, opts = {})
      data, _status_code, _headers = import_inbox_message_with_http_info(inbox_id, opts)
      data
    end

    # Import message
    # Import a new message in an inbox.
    # @param inbox_id [String] The Inbox ID
    # @param [Hash] opts the optional parameters
    # @option opts [ImportMessage] :import_message 
    # @return [Array<(ReceiveCustomMessages202Response, Integer, Hash)>] ReceiveCustomMessages202Response data, response status code and response headers
    def import_inbox_message_with_http_info(inbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagesApi.import_inbox_message ...'
      end
      # verify the required parameter 'inbox_id' is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbox_id' when calling MessagesApi.import_inbox_message"
      end
      # resource path
      local_var_path = '/inboxes/{inbox_id}/imported_messages'.sub('{' + 'inbox_id' + '}', CGI.escape(inbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'import_message'])

      # return_type
      return_type = opts[:debug_return_type] || 'ReceiveCustomMessages202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"MessagesApi.import_inbox_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#import_inbox_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark message seen
    # Mark an outbound message from Front as seen. Note, the message seen route should only be called in response to an actual end-user's message-seen action. In accordance with this behavior, the route is rate limited to 10 requests per hour. The request body should send an empty object.
    # @param message_id [String] The message ID
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [nil]
    def mark_message_seen(message_id, opts = {})
      mark_message_seen_with_http_info(message_id, opts)
      nil
    end

    # Mark message seen
    # Mark an outbound message from Front as seen. Note, the message seen route should only be called in response to an actual end-user&#39;s message-seen action. In accordance with this behavior, the route is rate limited to 10 requests per hour. The request body should send an empty object.
    # @param message_id [String] The message ID
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mark_message_seen_with_http_info(message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagesApi.mark_message_seen ...'
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling MessagesApi.mark_message_seen"
      end
      # resource path
      local_var_path = '/messages/{message_id}/seen'.sub('{' + 'message_id' + '}', CGI.escape(message_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"MessagesApi.mark_message_seen",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#mark_message_seen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Receive custom messages
    # Receive a custom message in Front. This endpoint is available for custom channels **ONLY**.
    # @param channel_id [String] The channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @param [Hash] opts the optional parameters
    # @option opts [CustomMessage] :custom_message 
    # @return [ReceiveCustomMessages202Response]
    def receive_custom_messages(channel_id, opts = {})
      data, _status_code, _headers = receive_custom_messages_with_http_info(channel_id, opts)
      data
    end

    # Receive custom messages
    # Receive a custom message in Front. This endpoint is available for custom channels **ONLY**.
    # @param channel_id [String] The channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @param [Hash] opts the optional parameters
    # @option opts [CustomMessage] :custom_message 
    # @return [Array<(ReceiveCustomMessages202Response, Integer, Hash)>] ReceiveCustomMessages202Response data, response status code and response headers
    def receive_custom_messages_with_http_info(channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagesApi.receive_custom_messages ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling MessagesApi.receive_custom_messages"
      end
      # resource path
      local_var_path = '/channels/{channel_id}/incoming_messages'.sub('{' + 'channel_id' + '}', CGI.escape(channel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'custom_message'])

      # return_type
      return_type = opts[:debug_return_type] || 'ReceiveCustomMessages202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"MessagesApi.receive_custom_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#receive_custom_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
