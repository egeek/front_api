=begin
#Core API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module FrontApi
  class TeammateGroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add teammate group team inboxes
    # Links non-public inboxes to the teammate group. The inbox must be part of a team that has been added to the teammate group.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @option opts [InboxIds] :inbox_ids Inbox IDs to add
    # @return [nil]
    def add_company_teammate_group_team_inboxes(teammate_group_id, opts = {})
      add_company_teammate_group_team_inboxes_with_http_info(teammate_group_id, opts)
      nil
    end

    # Add teammate group team inboxes
    # Links non-public inboxes to the teammate group. The inbox must be part of a team that has been added to the teammate group.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @option opts [InboxIds] :inbox_ids Inbox IDs to add
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_company_teammate_group_team_inboxes_with_http_info(teammate_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeammateGroupsApi.add_company_teammate_group_team_inboxes ...'
      end
      # verify the required parameter 'teammate_group_id' is set
      if @api_client.config.client_side_validation && teammate_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'teammate_group_id' when calling TeammateGroupsApi.add_company_teammate_group_team_inboxes"
      end
      # resource path
      local_var_path = '/teammate_groups/{teammate_group_id}/inboxes'.sub('{' + 'teammate_group_id' + '}', CGI.escape(teammate_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'inbox_ids'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"TeammateGroupsApi.add_company_teammate_group_team_inboxes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeammateGroupsApi#add_company_teammate_group_team_inboxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add teammate group teammates
    # Add teammate group teammates. Note - You cannot modify a teammate group that is managed by SCIM.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @option opts [TeammateIds] :teammate_ids Teammate IDs to add. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @return [nil]
    def add_company_teammate_group_teammates(teammate_group_id, opts = {})
      add_company_teammate_group_teammates_with_http_info(teammate_group_id, opts)
      nil
    end

    # Add teammate group teammates
    # Add teammate group teammates. Note - You cannot modify a teammate group that is managed by SCIM.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @option opts [TeammateIds] :teammate_ids Teammate IDs to add. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_company_teammate_group_teammates_with_http_info(teammate_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeammateGroupsApi.add_company_teammate_group_teammates ...'
      end
      # verify the required parameter 'teammate_group_id' is set
      if @api_client.config.client_side_validation && teammate_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'teammate_group_id' when calling TeammateGroupsApi.add_company_teammate_group_teammates"
      end
      # resource path
      local_var_path = '/teammate_groups/{teammate_group_id}/teammates'.sub('{' + 'teammate_group_id' + '}', CGI.escape(teammate_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'teammate_ids'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"TeammateGroupsApi.add_company_teammate_group_teammates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeammateGroupsApi#add_company_teammate_group_teammates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add teammate group teams
    # Adds teams to the teammate group. Any teams added to the teammate group will automatically link public inboxes. Non-public inboxes can be added to the teammate group separately.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamIds] :team_ids Team IDs to add
    # @return [nil]
    def add_company_teammate_group_teams(teammate_group_id, opts = {})
      add_company_teammate_group_teams_with_http_info(teammate_group_id, opts)
      nil
    end

    # Add teammate group teams
    # Adds teams to the teammate group. Any teams added to the teammate group will automatically link public inboxes. Non-public inboxes can be added to the teammate group separately.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamIds] :team_ids Team IDs to add
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_company_teammate_group_teams_with_http_info(teammate_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeammateGroupsApi.add_company_teammate_group_teams ...'
      end
      # verify the required parameter 'teammate_group_id' is set
      if @api_client.config.client_side_validation && teammate_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'teammate_group_id' when calling TeammateGroupsApi.add_company_teammate_group_teams"
      end
      # resource path
      local_var_path = '/teammate_groups/{teammate_group_id}/teams'.sub('{' + 'teammate_group_id' + '}', CGI.escape(teammate_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'team_ids'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"TeammateGroupsApi.add_company_teammate_group_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeammateGroupsApi#add_company_teammate_group_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create teammate group
    # Create a new teammate group.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateTeammateGroup] :create_teammate_group 
    # @return [TeammateGroupResponse]
    def create_company_teammate_group(opts = {})
      data, _status_code, _headers = create_company_teammate_group_with_http_info(opts)
      data
    end

    # Create teammate group
    # Create a new teammate group.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateTeammateGroup] :create_teammate_group 
    # @return [Array<(TeammateGroupResponse, Integer, Hash)>] TeammateGroupResponse data, response status code and response headers
    def create_company_teammate_group_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeammateGroupsApi.create_company_teammate_group ...'
      end
      # resource path
      local_var_path = '/teammate_groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_teammate_group'])

      # return_type
      return_type = opts[:debug_return_type] || 'TeammateGroupResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"TeammateGroupsApi.create_company_teammate_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeammateGroupsApi#create_company_teammate_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete teammate group
    # Deletes a teammate group. Note - You cannot delete a teammate group that is managed by SCIM.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_company_teammate_group(teammate_group_id, opts = {})
      delete_company_teammate_group_with_http_info(teammate_group_id, opts)
      nil
    end

    # Delete teammate group
    # Deletes a teammate group. Note - You cannot delete a teammate group that is managed by SCIM.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_company_teammate_group_with_http_info(teammate_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeammateGroupsApi.delete_company_teammate_group ...'
      end
      # verify the required parameter 'teammate_group_id' is set
      if @api_client.config.client_side_validation && teammate_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'teammate_group_id' when calling TeammateGroupsApi.delete_company_teammate_group"
      end
      # resource path
      local_var_path = '/teammate_groups/{teammate_group_id}'.sub('{' + 'teammate_group_id' + '}', CGI.escape(teammate_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"TeammateGroupsApi.delete_company_teammate_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeammateGroupsApi#delete_company_teammate_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get teammate group
    # Fetch a teammate group.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @return [TeammateGroupResponse]
    def get_company_teammate_group(teammate_group_id, opts = {})
      data, _status_code, _headers = get_company_teammate_group_with_http_info(teammate_group_id, opts)
      data
    end

    # Get teammate group
    # Fetch a teammate group.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeammateGroupResponse, Integer, Hash)>] TeammateGroupResponse data, response status code and response headers
    def get_company_teammate_group_with_http_info(teammate_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeammateGroupsApi.get_company_teammate_group ...'
      end
      # verify the required parameter 'teammate_group_id' is set
      if @api_client.config.client_side_validation && teammate_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'teammate_group_id' when calling TeammateGroupsApi.get_company_teammate_group"
      end
      # resource path
      local_var_path = '/teammate_groups/{teammate_group_id}'.sub('{' + 'teammate_group_id' + '}', CGI.escape(teammate_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TeammateGroupResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"TeammateGroupsApi.get_company_teammate_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeammateGroupsApi#get_company_teammate_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List teammate group team inboxes
    # List inboxes that the teammate group has access to via its associated teams.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @return [ListConversationInboxes200Response]
    def list_company_teammate_group_team_inboxes(teammate_group_id, opts = {})
      data, _status_code, _headers = list_company_teammate_group_team_inboxes_with_http_info(teammate_group_id, opts)
      data
    end

    # List teammate group team inboxes
    # List inboxes that the teammate group has access to via its associated teams.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListConversationInboxes200Response, Integer, Hash)>] ListConversationInboxes200Response data, response status code and response headers
    def list_company_teammate_group_team_inboxes_with_http_info(teammate_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeammateGroupsApi.list_company_teammate_group_team_inboxes ...'
      end
      # verify the required parameter 'teammate_group_id' is set
      if @api_client.config.client_side_validation && teammate_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'teammate_group_id' when calling TeammateGroupsApi.list_company_teammate_group_team_inboxes"
      end
      # resource path
      local_var_path = '/teammate_groups/{teammate_group_id}/inboxes'.sub('{' + 'teammate_group_id' + '}', CGI.escape(teammate_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListConversationInboxes200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"TeammateGroupsApi.list_company_teammate_group_team_inboxes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeammateGroupsApi#list_company_teammate_group_team_inboxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List teammate group teammates
    # List teammate group teammates.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @return [ListCommentMentions200Response]
    def list_company_teammate_group_teammates(teammate_group_id, opts = {})
      data, _status_code, _headers = list_company_teammate_group_teammates_with_http_info(teammate_group_id, opts)
      data
    end

    # List teammate group teammates
    # List teammate group teammates.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListCommentMentions200Response, Integer, Hash)>] ListCommentMentions200Response data, response status code and response headers
    def list_company_teammate_group_teammates_with_http_info(teammate_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeammateGroupsApi.list_company_teammate_group_teammates ...'
      end
      # verify the required parameter 'teammate_group_id' is set
      if @api_client.config.client_side_validation && teammate_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'teammate_group_id' when calling TeammateGroupsApi.list_company_teammate_group_teammates"
      end
      # resource path
      local_var_path = '/teammate_groups/{teammate_group_id}/teammates'.sub('{' + 'teammate_group_id' + '}', CGI.escape(teammate_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCommentMentions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"TeammateGroupsApi.list_company_teammate_group_teammates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeammateGroupsApi#list_company_teammate_group_teammates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List teammate group teams
    # List teams added to the teammate group. Any teams added to the teammate group will automatically link public inboxes.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @return [ListCompanyTeammateGroupTeams200Response]
    def list_company_teammate_group_teams(teammate_group_id, opts = {})
      data, _status_code, _headers = list_company_teammate_group_teams_with_http_info(teammate_group_id, opts)
      data
    end

    # List teammate group teams
    # List teams added to the teammate group. Any teams added to the teammate group will automatically link public inboxes.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListCompanyTeammateGroupTeams200Response, Integer, Hash)>] ListCompanyTeammateGroupTeams200Response data, response status code and response headers
    def list_company_teammate_group_teams_with_http_info(teammate_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeammateGroupsApi.list_company_teammate_group_teams ...'
      end
      # verify the required parameter 'teammate_group_id' is set
      if @api_client.config.client_side_validation && teammate_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'teammate_group_id' when calling TeammateGroupsApi.list_company_teammate_group_teams"
      end
      # resource path
      local_var_path = '/teammate_groups/{teammate_group_id}/teams'.sub('{' + 'teammate_group_id' + '}', CGI.escape(teammate_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCompanyTeammateGroupTeams200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"TeammateGroupsApi.list_company_teammate_group_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeammateGroupsApi#list_company_teammate_group_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List teammate groups
    # List the teammate groups in the company.
    # @param [Hash] opts the optional parameters
    # @return [ListCompanyTeammateGroups200Response]
    def list_company_teammate_groups(opts = {})
      data, _status_code, _headers = list_company_teammate_groups_with_http_info(opts)
      data
    end

    # List teammate groups
    # List the teammate groups in the company.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListCompanyTeammateGroups200Response, Integer, Hash)>] ListCompanyTeammateGroups200Response data, response status code and response headers
    def list_company_teammate_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeammateGroupsApi.list_company_teammate_groups ...'
      end
      # resource path
      local_var_path = '/teammate_groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCompanyTeammateGroups200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"TeammateGroupsApi.list_company_teammate_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeammateGroupsApi#list_company_teammate_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove teammate group team inboxes
    # Unlinks non-public inboxes from the teammate group.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @option opts [InboxIds] :inbox_ids Inbox IDs to remove
    # @return [nil]
    def remove_company_teammate_group_team_inboxes(teammate_group_id, opts = {})
      remove_company_teammate_group_team_inboxes_with_http_info(teammate_group_id, opts)
      nil
    end

    # Remove teammate group team inboxes
    # Unlinks non-public inboxes from the teammate group.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @option opts [InboxIds] :inbox_ids Inbox IDs to remove
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_company_teammate_group_team_inboxes_with_http_info(teammate_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeammateGroupsApi.remove_company_teammate_group_team_inboxes ...'
      end
      # verify the required parameter 'teammate_group_id' is set
      if @api_client.config.client_side_validation && teammate_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'teammate_group_id' when calling TeammateGroupsApi.remove_company_teammate_group_team_inboxes"
      end
      # resource path
      local_var_path = '/teammate_groups/{teammate_group_id}/inboxes'.sub('{' + 'teammate_group_id' + '}', CGI.escape(teammate_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'inbox_ids'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"TeammateGroupsApi.remove_company_teammate_group_team_inboxes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeammateGroupsApi#remove_company_teammate_group_team_inboxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove teammate group teammates
    # Remove teammate group teammates. Note - You cannot modify a teammate group that is managed by SCIM.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @option opts [TeammateIds] :teammate_ids Teammate IDs to remove. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @return [nil]
    def remove_company_teammate_group_teammates(teammate_group_id, opts = {})
      remove_company_teammate_group_teammates_with_http_info(teammate_group_id, opts)
      nil
    end

    # Remove teammate group teammates
    # Remove teammate group teammates. Note - You cannot modify a teammate group that is managed by SCIM.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @option opts [TeammateIds] :teammate_ids Teammate IDs to remove. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_company_teammate_group_teammates_with_http_info(teammate_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeammateGroupsApi.remove_company_teammate_group_teammates ...'
      end
      # verify the required parameter 'teammate_group_id' is set
      if @api_client.config.client_side_validation && teammate_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'teammate_group_id' when calling TeammateGroupsApi.remove_company_teammate_group_teammates"
      end
      # resource path
      local_var_path = '/teammate_groups/{teammate_group_id}/teammates'.sub('{' + 'teammate_group_id' + '}', CGI.escape(teammate_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'teammate_ids'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"TeammateGroupsApi.remove_company_teammate_group_teammates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeammateGroupsApi#remove_company_teammate_group_teammates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove teammate group teams
    # Remove teams from the teammate group. Unlinks to any associated team inboxes.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamIds] :team_ids Team IDs to remove.
    # @return [nil]
    def remove_company_teammate_group_teams(teammate_group_id, opts = {})
      remove_company_teammate_group_teams_with_http_info(teammate_group_id, opts)
      nil
    end

    # Remove teammate group teams
    # Remove teams from the teammate group. Unlinks to any associated team inboxes.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @option opts [TeamIds] :team_ids Team IDs to remove.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_company_teammate_group_teams_with_http_info(teammate_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeammateGroupsApi.remove_company_teammate_group_teams ...'
      end
      # verify the required parameter 'teammate_group_id' is set
      if @api_client.config.client_side_validation && teammate_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'teammate_group_id' when calling TeammateGroupsApi.remove_company_teammate_group_teams"
      end
      # resource path
      local_var_path = '/teammate_groups/{teammate_group_id}/teams'.sub('{' + 'teammate_group_id' + '}', CGI.escape(teammate_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'team_ids'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"TeammateGroupsApi.remove_company_teammate_group_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeammateGroupsApi#remove_company_teammate_group_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a teammate group
    # Updates a teammate group. Note - You cannot modify a teammate group that is managed by SCIM.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateTeammateGroup] :update_teammate_group 
    # @return [nil]
    def update_a_company_teammate_group(teammate_group_id, opts = {})
      update_a_company_teammate_group_with_http_info(teammate_group_id, opts)
      nil
    end

    # Update a teammate group
    # Updates a teammate group. Note - You cannot modify a teammate group that is managed by SCIM.
    # @param teammate_group_id [String] The teammate group ID.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateTeammateGroup] :update_teammate_group 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_a_company_teammate_group_with_http_info(teammate_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeammateGroupsApi.update_a_company_teammate_group ...'
      end
      # verify the required parameter 'teammate_group_id' is set
      if @api_client.config.client_side_validation && teammate_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'teammate_group_id' when calling TeammateGroupsApi.update_a_company_teammate_group"
      end
      # resource path
      local_var_path = '/teammate_groups/{teammate_group_id}'.sub('{' + 'teammate_group_id' + '}', CGI.escape(teammate_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_teammate_group'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"TeammateGroupsApi.update_a_company_teammate_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeammateGroupsApi#update_a_company_teammate_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
