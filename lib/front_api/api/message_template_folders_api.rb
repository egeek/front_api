=begin
#Core API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module FrontApi
  class MessageTemplateFoldersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create child folder
    # Create a new message template folder as a child of the given folder
    # @param message_template_folder_id [String] The parent message template folder ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateMessageTemplateFolderAsChild] :create_message_template_folder_as_child Message template folder to create
    # @return [MessageTemplateFolderResponse]
    def create_child_folder(message_template_folder_id, opts = {})
      data, _status_code, _headers = create_child_folder_with_http_info(message_template_folder_id, opts)
      data
    end

    # Create child folder
    # Create a new message template folder as a child of the given folder
    # @param message_template_folder_id [String] The parent message template folder ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateMessageTemplateFolderAsChild] :create_message_template_folder_as_child Message template folder to create
    # @return [Array<(MessageTemplateFolderResponse, Integer, Hash)>] MessageTemplateFolderResponse data, response status code and response headers
    def create_child_folder_with_http_info(message_template_folder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageTemplateFoldersApi.create_child_folder ...'
      end
      # verify the required parameter 'message_template_folder_id' is set
      if @api_client.config.client_side_validation && message_template_folder_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_template_folder_id' when calling MessageTemplateFoldersApi.create_child_folder"
      end
      # resource path
      local_var_path = '/message_template_folders/{message_template_folder_id}/message_template_folders'.sub('{' + 'message_template_folder_id' + '}', CGI.escape(message_template_folder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_message_template_folder_as_child'])

      # return_type
      return_type = opts[:debug_return_type] || 'MessageTemplateFolderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"MessageTemplateFoldersApi.create_child_folder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageTemplateFoldersApi#create_child_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create folder
    # Create a new message template folder.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateMessageTemplateFolder] :create_message_template_folder Message template folder to create
    # @return [MessageTemplateFolderResponse]
    def create_folder(opts = {})
      data, _status_code, _headers = create_folder_with_http_info(opts)
      data
    end

    # Create folder
    # Create a new message template folder.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateMessageTemplateFolder] :create_message_template_folder Message template folder to create
    # @return [Array<(MessageTemplateFolderResponse, Integer, Hash)>] MessageTemplateFolderResponse data, response status code and response headers
    def create_folder_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageTemplateFoldersApi.create_folder ...'
      end
      # resource path
      local_var_path = '/message_template_folders'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_message_template_folder'])

      # return_type
      return_type = opts[:debug_return_type] || 'MessageTemplateFolderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"MessageTemplateFoldersApi.create_folder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageTemplateFoldersApi#create_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create team folder
    # Create a new message template folder belonging to the requested team (workspace).
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateMessageTemplateFolder] :create_message_template_folder Message template folder to create
    # @return [MessageTemplateFolderResponse]
    def create_team_folder(team_id, opts = {})
      data, _status_code, _headers = create_team_folder_with_http_info(team_id, opts)
      data
    end

    # Create team folder
    # Create a new message template folder belonging to the requested team (workspace).
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateMessageTemplateFolder] :create_message_template_folder Message template folder to create
    # @return [Array<(MessageTemplateFolderResponse, Integer, Hash)>] MessageTemplateFolderResponse data, response status code and response headers
    def create_team_folder_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageTemplateFoldersApi.create_team_folder ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling MessageTemplateFoldersApi.create_team_folder"
      end
      # resource path
      local_var_path = '/teams/{team_id}/message_template_folders'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_message_template_folder'])

      # return_type
      return_type = opts[:debug_return_type] || 'MessageTemplateFolderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"MessageTemplateFoldersApi.create_team_folder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageTemplateFoldersApi#create_team_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create teammate folder
    # Create a new message template folder belonging to the requested teammate.
    # @param teammate_id [String] The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @param [Hash] opts the optional parameters
    # @option opts [CreateMessageTemplateFolder] :create_message_template_folder Message template folder to create
    # @return [MessageTemplateFolderResponse]
    def create_teammate_folder(teammate_id, opts = {})
      data, _status_code, _headers = create_teammate_folder_with_http_info(teammate_id, opts)
      data
    end

    # Create teammate folder
    # Create a new message template folder belonging to the requested teammate.
    # @param teammate_id [String] The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @param [Hash] opts the optional parameters
    # @option opts [CreateMessageTemplateFolder] :create_message_template_folder Message template folder to create
    # @return [Array<(MessageTemplateFolderResponse, Integer, Hash)>] MessageTemplateFolderResponse data, response status code and response headers
    def create_teammate_folder_with_http_info(teammate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageTemplateFoldersApi.create_teammate_folder ...'
      end
      # verify the required parameter 'teammate_id' is set
      if @api_client.config.client_side_validation && teammate_id.nil?
        fail ArgumentError, "Missing the required parameter 'teammate_id' when calling MessageTemplateFoldersApi.create_teammate_folder"
      end
      # resource path
      local_var_path = '/teammates/{teammate_id}/message_template_folders'.sub('{' + 'teammate_id' + '}', CGI.escape(teammate_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_message_template_folder'])

      # return_type
      return_type = opts[:debug_return_type] || 'MessageTemplateFolderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"MessageTemplateFoldersApi.create_teammate_folder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageTemplateFoldersApi#create_teammate_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete folder
    # Delete a message template folder and child folders/templates
    # @param message_template_folder_id [String] The message template folder id
    # @param [Hash] opts the optional parameters
    # @return [DeleteFolder202Response]
    def delete_folder(message_template_folder_id, opts = {})
      data, _status_code, _headers = delete_folder_with_http_info(message_template_folder_id, opts)
      data
    end

    # Delete folder
    # Delete a message template folder and child folders/templates
    # @param message_template_folder_id [String] The message template folder id
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteFolder202Response, Integer, Hash)>] DeleteFolder202Response data, response status code and response headers
    def delete_folder_with_http_info(message_template_folder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageTemplateFoldersApi.delete_folder ...'
      end
      # verify the required parameter 'message_template_folder_id' is set
      if @api_client.config.client_side_validation && message_template_folder_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_template_folder_id' when calling MessageTemplateFoldersApi.delete_folder"
      end
      # resource path
      local_var_path = '/message_template_folders/{message_template_folder_id}'.sub('{' + 'message_template_folder_id' + '}', CGI.escape(message_template_folder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteFolder202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"MessageTemplateFoldersApi.delete_folder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageTemplateFoldersApi#delete_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get child folders
    # Fetch the child message templates folders of a message template folder.
    # @param message_template_folder_id [String] The message template folder ID
    # @param [Hash] opts the optional parameters
    # @return [ListFolders200Response]
    def get_child_folders(message_template_folder_id, opts = {})
      data, _status_code, _headers = get_child_folders_with_http_info(message_template_folder_id, opts)
      data
    end

    # Get child folders
    # Fetch the child message templates folders of a message template folder.
    # @param message_template_folder_id [String] The message template folder ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListFolders200Response, Integer, Hash)>] ListFolders200Response data, response status code and response headers
    def get_child_folders_with_http_info(message_template_folder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageTemplateFoldersApi.get_child_folders ...'
      end
      # verify the required parameter 'message_template_folder_id' is set
      if @api_client.config.client_side_validation && message_template_folder_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_template_folder_id' when calling MessageTemplateFoldersApi.get_child_folders"
      end
      # resource path
      local_var_path = '/message_template_folders/{message_template_folder_id}/message_template_folders'.sub('{' + 'message_template_folder_id' + '}', CGI.escape(message_template_folder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListFolders200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"MessageTemplateFoldersApi.get_child_folders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageTemplateFoldersApi#get_child_folders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get folder
    # Fetch a message template folder.
    # @param message_template_folder_id [String] The message template folder ID
    # @param [Hash] opts the optional parameters
    # @return [MessageTemplateFolderResponse]
    def get_folder(message_template_folder_id, opts = {})
      data, _status_code, _headers = get_folder_with_http_info(message_template_folder_id, opts)
      data
    end

    # Get folder
    # Fetch a message template folder.
    # @param message_template_folder_id [String] The message template folder ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageTemplateFolderResponse, Integer, Hash)>] MessageTemplateFolderResponse data, response status code and response headers
    def get_folder_with_http_info(message_template_folder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageTemplateFoldersApi.get_folder ...'
      end
      # verify the required parameter 'message_template_folder_id' is set
      if @api_client.config.client_side_validation && message_template_folder_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_template_folder_id' when calling MessageTemplateFoldersApi.get_folder"
      end
      # resource path
      local_var_path = '/message_template_folders/{message_template_folder_id}'.sub('{' + 'message_template_folder_id' + '}', CGI.escape(message_template_folder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MessageTemplateFolderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"MessageTemplateFoldersApi.get_folder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageTemplateFoldersApi#get_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List folders
    # List the message template folders.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by Field used to sort the message template folders. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;.
    # @option opts [String] :sort_order Order by which results should be sorted
    # @return [ListFolders200Response]
    def list_folders(opts = {})
      data, _status_code, _headers = list_folders_with_http_info(opts)
      data
    end

    # List folders
    # List the message template folders.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by Field used to sort the message template folders. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;.
    # @option opts [String] :sort_order Order by which results should be sorted
    # @return [Array<(ListFolders200Response, Integer, Hash)>] ListFolders200Response data, response status code and response headers
    def list_folders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageTemplateFoldersApi.list_folders ...'
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !allowable_values.include?(opts[:'sort_order'])
        fail ArgumentError, "invalid value for \"sort_order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/message_template_folders'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListFolders200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"MessageTemplateFoldersApi.list_folders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageTemplateFoldersApi#list_folders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List team folders
    # List the message template folders belonging to the requested team (workspace).
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by Field used to sort the message template folders. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;.
    # @option opts [String] :sort_order Order by which results should be sorted
    # @return [ListFolders200Response]
    def list_team_folders(team_id, opts = {})
      data, _status_code, _headers = list_team_folders_with_http_info(team_id, opts)
      data
    end

    # List team folders
    # List the message template folders belonging to the requested team (workspace).
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by Field used to sort the message template folders. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;.
    # @option opts [String] :sort_order Order by which results should be sorted
    # @return [Array<(ListFolders200Response, Integer, Hash)>] ListFolders200Response data, response status code and response headers
    def list_team_folders_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageTemplateFoldersApi.list_team_folders ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling MessageTemplateFoldersApi.list_team_folders"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !allowable_values.include?(opts[:'sort_order'])
        fail ArgumentError, "invalid value for \"sort_order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/teams/{team_id}/message_template_folders'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListFolders200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"MessageTemplateFoldersApi.list_team_folders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageTemplateFoldersApi#list_team_folders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List teammate folders
    # List the message template folders belonging to the requested teammate.
    # @param teammate_id [String] The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by Field used to sort the message template folders. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;.
    # @option opts [String] :sort_order Order by which results should be sorted
    # @return [ListFolders200Response]
    def list_teammate_folders(teammate_id, opts = {})
      data, _status_code, _headers = list_teammate_folders_with_http_info(teammate_id, opts)
      data
    end

    # List teammate folders
    # List the message template folders belonging to the requested teammate.
    # @param teammate_id [String] The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by Field used to sort the message template folders. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;.
    # @option opts [String] :sort_order Order by which results should be sorted
    # @return [Array<(ListFolders200Response, Integer, Hash)>] ListFolders200Response data, response status code and response headers
    def list_teammate_folders_with_http_info(teammate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageTemplateFoldersApi.list_teammate_folders ...'
      end
      # verify the required parameter 'teammate_id' is set
      if @api_client.config.client_side_validation && teammate_id.nil?
        fail ArgumentError, "Missing the required parameter 'teammate_id' when calling MessageTemplateFoldersApi.list_teammate_folders"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !allowable_values.include?(opts[:'sort_order'])
        fail ArgumentError, "invalid value for \"sort_order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/teammates/{teammate_id}/message_template_folders'.sub('{' + 'teammate_id' + '}', CGI.escape(teammate_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListFolders200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"MessageTemplateFoldersApi.list_teammate_folders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageTemplateFoldersApi#list_teammate_folders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update folder
    # Update message template folder
    # @param message_template_folder_id [String] The message template folder ID
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateMessageTemplateFolder] :update_message_template_folder Message template folder to update
    # @return [MessageTemplateFolderResponse]
    def update_folder(message_template_folder_id, opts = {})
      data, _status_code, _headers = update_folder_with_http_info(message_template_folder_id, opts)
      data
    end

    # Update folder
    # Update message template folder
    # @param message_template_folder_id [String] The message template folder ID
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateMessageTemplateFolder] :update_message_template_folder Message template folder to update
    # @return [Array<(MessageTemplateFolderResponse, Integer, Hash)>] MessageTemplateFolderResponse data, response status code and response headers
    def update_folder_with_http_info(message_template_folder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageTemplateFoldersApi.update_folder ...'
      end
      # verify the required parameter 'message_template_folder_id' is set
      if @api_client.config.client_side_validation && message_template_folder_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_template_folder_id' when calling MessageTemplateFoldersApi.update_folder"
      end
      # resource path
      local_var_path = '/message_template_folders/{message_template_folder_id}'.sub('{' + 'message_template_folder_id' + '}', CGI.escape(message_template_folder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_message_template_folder'])

      # return_type
      return_type = opts[:debug_return_type] || 'MessageTemplateFolderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"MessageTemplateFoldersApi.update_folder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageTemplateFoldersApi#update_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
