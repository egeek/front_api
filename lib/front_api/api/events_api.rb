=begin
#Core API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module FrontApi
  class EventsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get event
    # Fetch an event. Refer to the [Events](https://dev.frontapp.com/reference/events) topic for more information, including sorting and filtering. 
    # @param event_id [String] The event ID
    # @param [Hash] opts the optional parameters
    # @return [EventResponse]
    def get_event(event_id, opts = {})
      data, _status_code, _headers = get_event_with_http_info(event_id, opts)
      data
    end

    # Get event
    # Fetch an event. Refer to the [Events](https://dev.frontapp.com/reference/events) topic for more information, including sorting and filtering. 
    # @param event_id [String] The event ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(EventResponse, Integer, Hash)>] EventResponse data, response status code and response headers
    def get_event_with_http_info(event_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.get_event ...'
      end
      # verify the required parameter 'event_id' is set
      if @api_client.config.client_side_validation && event_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_id' when calling EventsApi.get_event"
      end
      # resource path
      local_var_path = '/events/{event_id}'.sub('{' + 'event_id' + '}', CGI.escape(event_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EventResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"EventsApi.get_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#get_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List events
    # Lists all the detailed events which occured in the inboxes of the company ordered in reverse chronological order (newest first). Refer to the [Events](https://dev.frontapp.com/reference/events) topic for more information, including sorting and filtering. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q [Search query object](https://dev.frontapp.com/docs/query-object-q) with optional properties &#x60;before&#x60;, &#x60;after&#x60;, or &#x60;types&#x60;. &#x60;before&#x60; and &#x60;after&#x60; should be a timestamp in seconds with up to 3 decimal places. &#x60;types&#x60; should be a list of [event types](https://dev.frontapp.com/reference/events).
    # @option opts [Integer] :limit Max number of results per page (max 15) (default to 15)
    # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :sort_by Field used to sort the events. Only supports &#x60;created_at&#x60;.
    # @option opts [String] :sort_order Order by which results should be sorted
    # @return [ListConversationEvents200Response]
    def list_events(opts = {})
      data, _status_code, _headers = list_events_with_http_info(opts)
      data
    end

    # List events
    # Lists all the detailed events which occured in the inboxes of the company ordered in reverse chronological order (newest first). Refer to the [Events](https://dev.frontapp.com/reference/events) topic for more information, including sorting and filtering. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q [Search query object](https://dev.frontapp.com/docs/query-object-q) with optional properties &#x60;before&#x60;, &#x60;after&#x60;, or &#x60;types&#x60;. &#x60;before&#x60; and &#x60;after&#x60; should be a timestamp in seconds with up to 3 decimal places. &#x60;types&#x60; should be a list of [event types](https://dev.frontapp.com/reference/events).
    # @option opts [Integer] :limit Max number of results per page (max 15) (default to 15)
    # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :sort_by Field used to sort the events. Only supports &#x60;created_at&#x60;.
    # @option opts [String] :sort_order Order by which results should be sorted
    # @return [Array<(ListConversationEvents200Response, Integer, Hash)>] ListConversationEvents200Response data, response status code and response headers
    def list_events_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.list_events ...'
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !allowable_values.include?(opts[:'sort_order'])
        fail ArgumentError, "invalid value for \"sort_order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/events'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListConversationEvents200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"EventsApi.list_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#list_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
