=begin
#Core API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module FrontApi
  class RulesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get rule
    # Fetch a rule.
    # @param rule_id [String] The Rule ID
    # @param [Hash] opts the optional parameters
    # @return [RuleResponse]
    def get_rule(rule_id, opts = {})
      data, _status_code, _headers = get_rule_with_http_info(rule_id, opts)
      data
    end

    # Get rule
    # Fetch a rule.
    # @param rule_id [String] The Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(RuleResponse, Integer, Hash)>] RuleResponse data, response status code and response headers
    def get_rule_with_http_info(rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.get_rule ...'
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling RulesApi.get_rule"
      end
      # resource path
      local_var_path = '/rules/{rule_id}'.sub('{' + 'rule_id' + '}', CGI.escape(rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RuleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"RulesApi.get_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#get_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all company rules
    # List the company rules.
    # @param [Hash] opts the optional parameters
    # @return [ListAllCompanyRules200Response]
    def list_all_company_rules(opts = {})
      data, _status_code, _headers = list_all_company_rules_with_http_info(opts)
      data
    end

    # List all company rules
    # List the company rules.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListAllCompanyRules200Response, Integer, Hash)>] ListAllCompanyRules200Response data, response status code and response headers
    def list_all_company_rules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_all_company_rules ...'
      end
      # resource path
      local_var_path = '/company/rules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListAllCompanyRules200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"RulesApi.list_all_company_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_all_company_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List rules
    # List the rules of the company.
    # @param [Hash] opts the optional parameters
    # @return [ListAllCompanyRules200Response]
    def list_rules(opts = {})
      data, _status_code, _headers = list_rules_with_http_info(opts)
      data
    end

    # List rules
    # List the rules of the company.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListAllCompanyRules200Response, Integer, Hash)>] ListAllCompanyRules200Response data, response status code and response headers
    def list_rules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_rules ...'
      end
      # resource path
      local_var_path = '/rules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListAllCompanyRules200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"RulesApi.list_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List team rules
    # List the rules of a team (workspace).
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @return [ListAllCompanyRules200Response]
    def list_team_rules(team_id, opts = {})
      data, _status_code, _headers = list_team_rules_with_http_info(team_id, opts)
      data
    end

    # List team rules
    # List the rules of a team (workspace).
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListAllCompanyRules200Response, Integer, Hash)>] ListAllCompanyRules200Response data, response status code and response headers
    def list_team_rules_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_team_rules ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling RulesApi.list_team_rules"
      end
      # resource path
      local_var_path = '/teams/{team_id}/rules'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListAllCompanyRules200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"RulesApi.list_team_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_team_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List teammate rules
    # List the rules of a teammate.
    # @param teammate_id [String] The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @param [Hash] opts the optional parameters
    # @return [ListAllCompanyRules200Response]
    def list_teammate_rules(teammate_id, opts = {})
      data, _status_code, _headers = list_teammate_rules_with_http_info(teammate_id, opts)
      data
    end

    # List teammate rules
    # List the rules of a teammate.
    # @param teammate_id [String] The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListAllCompanyRules200Response, Integer, Hash)>] ListAllCompanyRules200Response data, response status code and response headers
    def list_teammate_rules_with_http_info(teammate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RulesApi.list_teammate_rules ...'
      end
      # verify the required parameter 'teammate_id' is set
      if @api_client.config.client_side_validation && teammate_id.nil?
        fail ArgumentError, "Missing the required parameter 'teammate_id' when calling RulesApi.list_teammate_rules"
      end
      # resource path
      local_var_path = '/teammates/{teammate_id}/rules'.sub('{' + 'teammate_id' + '}', CGI.escape(teammate_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListAllCompanyRules200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"RulesApi.list_teammate_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RulesApi#list_teammate_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
