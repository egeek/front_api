=begin
#Core API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module FrontApi
  class CommentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add comment
    # Add a comment to a [conversation](https://dev.frontapp.com/reference/conversations). If you want to create a new comment-only conversation, use the [Create discussion conversation](https://dev.frontapp.com/reference/create-conversation) endpoint.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateComment] :create_comment 
    # @return [CommentResponse]
    def add_comment(conversation_id, opts = {})
      data, _status_code, _headers = add_comment_with_http_info(conversation_id, opts)
      data
    end

    # Add comment
    # Add a comment to a [conversation](https://dev.frontapp.com/reference/conversations). If you want to create a new comment-only conversation, use the [Create discussion conversation](https://dev.frontapp.com/reference/create-conversation) endpoint.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateComment] :create_comment 
    # @return [Array<(CommentResponse, Integer, Hash)>] CommentResponse data, response status code and response headers
    def add_comment_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommentsApi.add_comment ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling CommentsApi.add_comment"
      end
      # resource path
      local_var_path = '/conversations/{conversation_id}/comments'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_comment'])

      # return_type
      return_type = opts[:debug_return_type] || 'CommentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"CommentsApi.add_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommentsApi#add_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get comment
    # Fetches a comment.
    # @param comment_id [String] The Comment ID
    # @param [Hash] opts the optional parameters
    # @return [CommentResponse]
    def get_comment(comment_id, opts = {})
      data, _status_code, _headers = get_comment_with_http_info(comment_id, opts)
      data
    end

    # Get comment
    # Fetches a comment.
    # @param comment_id [String] The Comment ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommentResponse, Integer, Hash)>] CommentResponse data, response status code and response headers
    def get_comment_with_http_info(comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommentsApi.get_comment ...'
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling CommentsApi.get_comment"
      end
      # resource path
      local_var_path = '/comments/{comment_id}'.sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CommentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"CommentsApi.get_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommentsApi#get_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List comment mentions
    # List the teammates mentioned in a comment.
    # @param comment_id [String] The Comment ID
    # @param [Hash] opts the optional parameters
    # @return [ListCommentMentions200Response]
    def list_comment_mentions(comment_id, opts = {})
      data, _status_code, _headers = list_comment_mentions_with_http_info(comment_id, opts)
      data
    end

    # List comment mentions
    # List the teammates mentioned in a comment.
    # @param comment_id [String] The Comment ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListCommentMentions200Response, Integer, Hash)>] ListCommentMentions200Response data, response status code and response headers
    def list_comment_mentions_with_http_info(comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommentsApi.list_comment_mentions ...'
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling CommentsApi.list_comment_mentions"
      end
      # resource path
      local_var_path = '/comments/{comment_id}/mentions'.sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCommentMentions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"CommentsApi.list_comment_mentions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommentsApi#list_comment_mentions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List conversation comments
    # List the comments in a conversation in reverse chronological order (newest first).
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @return [ListConversationComments200Response]
    def list_conversation_comments(conversation_id, opts = {})
      data, _status_code, _headers = list_conversation_comments_with_http_info(conversation_id, opts)
      data
    end

    # List conversation comments
    # List the comments in a conversation in reverse chronological order (newest first).
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListConversationComments200Response, Integer, Hash)>] ListConversationComments200Response data, response status code and response headers
    def list_conversation_comments_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommentsApi.list_conversation_comments ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling CommentsApi.list_conversation_comments"
      end
      # resource path
      local_var_path = '/conversations/{conversation_id}/comments'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListConversationComments200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"CommentsApi.list_conversation_comments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommentsApi#list_conversation_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update comment
    # Update a comment in a [conversation](https://dev.frontapp.com/reference/conversations).
    # @param comment_id [String] The Comment ID
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateComment] :update_comment 
    # @return [CommentResponse]
    def update_comment(comment_id, opts = {})
      data, _status_code, _headers = update_comment_with_http_info(comment_id, opts)
      data
    end

    # Update comment
    # Update a comment in a [conversation](https://dev.frontapp.com/reference/conversations).
    # @param comment_id [String] The Comment ID
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateComment] :update_comment 
    # @return [Array<(CommentResponse, Integer, Hash)>] CommentResponse data, response status code and response headers
    def update_comment_with_http_info(comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommentsApi.update_comment ...'
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling CommentsApi.update_comment"
      end
      # resource path
      local_var_path = '/comments/{comment_id}/'.sub('{' + 'comment_id' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_comment'])

      # return_type
      return_type = opts[:debug_return_type] || 'CommentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"CommentsApi.update_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommentsApi#update_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
