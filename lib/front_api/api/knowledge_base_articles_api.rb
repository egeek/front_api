=begin
#Core API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module FrontApi
  class KnowledgeBaseArticlesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete an article
    # Deletes an article and all its content and translations.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param article_id [String] The ID of the article to delete
    # @param [Hash] opts the optional parameters
    # @return [KnowledgeBaseArticleSlimResponse]
    def delete_an_article(article_id, opts = {})
      data, _status_code, _headers = delete_an_article_with_http_info(article_id, opts)
      data
    end

    # Delete an article
    # Deletes an article and all its content and translations.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param article_id [String] The ID of the article to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(KnowledgeBaseArticleSlimResponse, Integer, Hash)>] KnowledgeBaseArticleSlimResponse data, response status code and response headers
    def delete_an_article_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBaseArticlesApi.delete_an_article ...'
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling KnowledgeBaseArticlesApi.delete_an_article"
      end
      # resource path
      local_var_path = '/knowledge_base_articles/{article_id}'.sub('{' + 'article_id' + '}', CGI.escape(article_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KnowledgeBaseArticleSlimResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBaseArticlesApi.delete_an_article",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBaseArticlesApi#delete_an_article\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download attachment from an article
    # Downloads the attachment from an article.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param article_id [String] The ID of the article
    # @param attachment_id [String] The ID of the file to download
    # @param [Hash] opts the optional parameters
    # @return [Attachment]
    def download_attachment_from_an_article(article_id, attachment_id, opts = {})
      data, _status_code, _headers = download_attachment_from_an_article_with_http_info(article_id, attachment_id, opts)
      data
    end

    # Download attachment from an article
    # Downloads the attachment from an article.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param article_id [String] The ID of the article
    # @param attachment_id [String] The ID of the file to download
    # @param [Hash] opts the optional parameters
    # @return [Array<(Attachment, Integer, Hash)>] Attachment data, response status code and response headers
    def download_attachment_from_an_article_with_http_info(article_id, attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBaseArticlesApi.download_attachment_from_an_article ...'
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling KnowledgeBaseArticlesApi.download_attachment_from_an_article"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling KnowledgeBaseArticlesApi.download_attachment_from_an_article"
      end
      # resource path
      local_var_path = '/knowledge_base_articles/{article_id}/download/{attachment_id}'.sub('{' + 'article_id' + '}', CGI.escape(article_id.to_s)).sub('{' + 'attachment_id' + '}', CGI.escape(attachment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Attachment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBaseArticlesApi.download_attachment_from_an_article",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBaseArticlesApi#download_attachment_from_an_article\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a knowledge base article
    # Fetches a knowledge base article.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param article_id [String] The ID of the article to fetch
    # @param [Hash] opts the optional parameters
    # @return [KnowledgeBaseArticleSlimResponse]
    def get_a_knowledge_base_article(article_id, opts = {})
      data, _status_code, _headers = get_a_knowledge_base_article_with_http_info(article_id, opts)
      data
    end

    # Get a knowledge base article
    # Fetches a knowledge base article.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param article_id [String] The ID of the article to fetch
    # @param [Hash] opts the optional parameters
    # @return [Array<(KnowledgeBaseArticleSlimResponse, Integer, Hash)>] KnowledgeBaseArticleSlimResponse data, response status code and response headers
    def get_a_knowledge_base_article_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBaseArticlesApi.get_a_knowledge_base_article ...'
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling KnowledgeBaseArticlesApi.get_a_knowledge_base_article"
      end
      # resource path
      local_var_path = '/knowledge_base_articles/{article_id}'.sub('{' + 'article_id' + '}', CGI.escape(article_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KnowledgeBaseArticleSlimResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBaseArticlesApi.get_a_knowledge_base_article",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBaseArticlesApi#get_a_knowledge_base_article\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get knowledge base article with content in default locale
    # Fetches a knowledge base article with content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param article_id [String] The ID of the article to fetch
    # @param [Hash] opts the optional parameters
    # @return [KnowledgeBaseArticleResponse]
    def get_knowledge_base_article_with_content_in_default_locale(article_id, opts = {})
      data, _status_code, _headers = get_knowledge_base_article_with_content_in_default_locale_with_http_info(article_id, opts)
      data
    end

    # Get knowledge base article with content in default locale
    # Fetches a knowledge base article with content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param article_id [String] The ID of the article to fetch
    # @param [Hash] opts the optional parameters
    # @return [Array<(KnowledgeBaseArticleResponse, Integer, Hash)>] KnowledgeBaseArticleResponse data, response status code and response headers
    def get_knowledge_base_article_with_content_in_default_locale_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBaseArticlesApi.get_knowledge_base_article_with_content_in_default_locale ...'
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling KnowledgeBaseArticlesApi.get_knowledge_base_article_with_content_in_default_locale"
      end
      # resource path
      local_var_path = '/knowledge_base_articles/{article_id}/content'.sub('{' + 'article_id' + '}', CGI.escape(article_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KnowledgeBaseArticleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBaseArticlesApi.get_knowledge_base_article_with_content_in_default_locale",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBaseArticlesApi#get_knowledge_base_article_with_content_in_default_locale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get knowledge base article with content in specified locale
    # Fetches a knowledge base article with content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param article_id [String] The ID of the article to fetch
    # @param locale [String] The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch
    # @param [Hash] opts the optional parameters
    # @return [KnowledgeBaseArticleResponse]
    def get_knowledge_base_article_with_content_in_specified_locale(article_id, locale, opts = {})
      data, _status_code, _headers = get_knowledge_base_article_with_content_in_specified_locale_with_http_info(article_id, locale, opts)
      data
    end

    # Get knowledge base article with content in specified locale
    # Fetches a knowledge base article with content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param article_id [String] The ID of the article to fetch
    # @param locale [String] The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch
    # @param [Hash] opts the optional parameters
    # @return [Array<(KnowledgeBaseArticleResponse, Integer, Hash)>] KnowledgeBaseArticleResponse data, response status code and response headers
    def get_knowledge_base_article_with_content_in_specified_locale_with_http_info(article_id, locale, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBaseArticlesApi.get_knowledge_base_article_with_content_in_specified_locale ...'
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling KnowledgeBaseArticlesApi.get_knowledge_base_article_with_content_in_specified_locale"
      end
      # verify the required parameter 'locale' is set
      if @api_client.config.client_side_validation && locale.nil?
        fail ArgumentError, "Missing the required parameter 'locale' when calling KnowledgeBaseArticlesApi.get_knowledge_base_article_with_content_in_specified_locale"
      end
      # resource path
      local_var_path = '/knowledge_base_articles/{article_id}/locales/{locale}/content'.sub('{' + 'article_id' + '}', CGI.escape(article_id.to_s)).sub('{' + 'locale' + '}', CGI.escape(locale.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KnowledgeBaseArticleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBaseArticlesApi.get_knowledge_base_article_with_content_in_specified_locale",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBaseArticlesApi#get_knowledge_base_article_with_content_in_specified_locale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List articles in a category
    # List articles in a category.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param category_id [String] The ID of the category
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    # @return [ListArticlesInACategory200Response]
    def list_articles_in_a_category(category_id, opts = {})
      data, _status_code, _headers = list_articles_in_a_category_with_http_info(category_id, opts)
      data
    end

    # List articles in a category
    # List articles in a category.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param category_id [String] The ID of the category
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    # @return [Array<(ListArticlesInACategory200Response, Integer, Hash)>] ListArticlesInACategory200Response data, response status code and response headers
    def list_articles_in_a_category_with_http_info(category_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBaseArticlesApi.list_articles_in_a_category ...'
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling KnowledgeBaseArticlesApi.list_articles_in_a_category"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling KnowledgeBaseArticlesApi.list_articles_in_a_category, must be smaller than or equal to 100.'
      end

      # resource path
      local_var_path = '/knowledge_base_categories/{category_id}/articles'.sub('{' + 'category_id' + '}', CGI.escape(category_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListArticlesInACategory200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBaseArticlesApi.list_articles_in_a_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBaseArticlesApi#list_articles_in_a_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List articles in a knowledge base
    # List articles in a knowledge base  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    # @return [ListArticlesInACategory200Response]
    def list_articles_in_a_knowledge_base(knowledge_base_id, opts = {})
      data, _status_code, _headers = list_articles_in_a_knowledge_base_with_http_info(knowledge_base_id, opts)
      data
    end

    # List articles in a knowledge base
    # List articles in a knowledge base  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    # @return [Array<(ListArticlesInACategory200Response, Integer, Hash)>] ListArticlesInACategory200Response data, response status code and response headers
    def list_articles_in_a_knowledge_base_with_http_info(knowledge_base_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBaseArticlesApi.list_articles_in_a_knowledge_base ...'
      end
      # verify the required parameter 'knowledge_base_id' is set
      if @api_client.config.client_side_validation && knowledge_base_id.nil?
        fail ArgumentError, "Missing the required parameter 'knowledge_base_id' when calling KnowledgeBaseArticlesApi.list_articles_in_a_knowledge_base"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling KnowledgeBaseArticlesApi.list_articles_in_a_knowledge_base, must be smaller than or equal to 100.'
      end

      # resource path
      local_var_path = '/knowledge_bases/{knowledge_base_id}/articles'.sub('{' + 'knowledge_base_id' + '}', CGI.escape(knowledge_base_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListArticlesInACategory200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBaseArticlesApi.list_articles_in_a_knowledge_base",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBaseArticlesApi#list_articles_in_a_knowledge_base\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update article content in default locale.
    # Updates an article's content in the default locale  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param article_id [String] The ID of the article to update
    # @param [Hash] opts the optional parameters
    # @option opts [KnowledgeBaseArticlePatch] :knowledge_base_article_patch 
    # @return [KnowledgeBaseArticleResponse]
    def update_article_content_in_default_locale(article_id, opts = {})
      data, _status_code, _headers = update_article_content_in_default_locale_with_http_info(article_id, opts)
      data
    end

    # Update article content in default locale.
    # Updates an article&#39;s content in the default locale  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param article_id [String] The ID of the article to update
    # @param [Hash] opts the optional parameters
    # @option opts [KnowledgeBaseArticlePatch] :knowledge_base_article_patch 
    # @return [Array<(KnowledgeBaseArticleResponse, Integer, Hash)>] KnowledgeBaseArticleResponse data, response status code and response headers
    def update_article_content_in_default_locale_with_http_info(article_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBaseArticlesApi.update_article_content_in_default_locale ...'
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling KnowledgeBaseArticlesApi.update_article_content_in_default_locale"
      end
      # resource path
      local_var_path = '/knowledge_base_articles/{article_id}/content'.sub('{' + 'article_id' + '}', CGI.escape(article_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'knowledge_base_article_patch'])

      # return_type
      return_type = opts[:debug_return_type] || 'KnowledgeBaseArticleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBaseArticlesApi.update_article_content_in_default_locale",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBaseArticlesApi#update_article_content_in_default_locale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update article content in specified locale
    # Updates an article's content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param article_id [String] The ID of the article to update
    # @param locale [String] The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content
    # @param [Hash] opts the optional parameters
    # @option opts [KnowledgeBaseArticlePatch] :knowledge_base_article_patch 
    # @return [KnowledgeBaseArticleResponse]
    def update_article_content_in_specified_locale(article_id, locale, opts = {})
      data, _status_code, _headers = update_article_content_in_specified_locale_with_http_info(article_id, locale, opts)
      data
    end

    # Update article content in specified locale
    # Updates an article&#39;s content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param article_id [String] The ID of the article to update
    # @param locale [String] The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content
    # @param [Hash] opts the optional parameters
    # @option opts [KnowledgeBaseArticlePatch] :knowledge_base_article_patch 
    # @return [Array<(KnowledgeBaseArticleResponse, Integer, Hash)>] KnowledgeBaseArticleResponse data, response status code and response headers
    def update_article_content_in_specified_locale_with_http_info(article_id, locale, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBaseArticlesApi.update_article_content_in_specified_locale ...'
      end
      # verify the required parameter 'article_id' is set
      if @api_client.config.client_side_validation && article_id.nil?
        fail ArgumentError, "Missing the required parameter 'article_id' when calling KnowledgeBaseArticlesApi.update_article_content_in_specified_locale"
      end
      # verify the required parameter 'locale' is set
      if @api_client.config.client_side_validation && locale.nil?
        fail ArgumentError, "Missing the required parameter 'locale' when calling KnowledgeBaseArticlesApi.update_article_content_in_specified_locale"
      end
      # resource path
      local_var_path = '/knowledge_base_articles/{article_id}/locales/{locale}/content'.sub('{' + 'article_id' + '}', CGI.escape(article_id.to_s)).sub('{' + 'locale' + '}', CGI.escape(locale.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'knowledge_base_article_patch'])

      # return_type
      return_type = opts[:debug_return_type] || 'KnowledgeBaseArticleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBaseArticlesApi.update_article_content_in_specified_locale",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBaseArticlesApi#update_article_content_in_specified_locale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
