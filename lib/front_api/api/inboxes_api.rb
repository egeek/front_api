=begin
#Core API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module FrontApi
  class InboxesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add inbox access
    # Give access to one or more teammates to an inbox.
    # @param inbox_id [String] The Inbox ID
    # @param [Hash] opts the optional parameters
    # @option opts [TeammateIds] :teammate_ids Teammate IDs to add. Alternatively, you can supply teammate emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @return [nil]
    def add_inbox_access(inbox_id, opts = {})
      add_inbox_access_with_http_info(inbox_id, opts)
      nil
    end

    # Add inbox access
    # Give access to one or more teammates to an inbox.
    # @param inbox_id [String] The Inbox ID
    # @param [Hash] opts the optional parameters
    # @option opts [TeammateIds] :teammate_ids Teammate IDs to add. Alternatively, you can supply teammate emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_inbox_access_with_http_info(inbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.add_inbox_access ...'
      end
      # verify the required parameter 'inbox_id' is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbox_id' when calling InboxesApi.add_inbox_access"
      end
      # resource path
      local_var_path = '/inboxes/{inbox_id}/teammates'.sub('{' + 'inbox_id' + '}', CGI.escape(inbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'teammate_ids'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"InboxesApi.add_inbox_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#add_inbox_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create inbox
    # Create an inbox in the default team (workspace). The default team will be the oldest team created that still exists at the time of the request.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateInbox] :create_inbox Inbox details
    # @return [nil]
    def create_inbox(opts = {})
      create_inbox_with_http_info(opts)
      nil
    end

    # Create inbox
    # Create an inbox in the default team (workspace). The default team will be the oldest team created that still exists at the time of the request.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateInbox] :create_inbox Inbox details
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_inbox_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.create_inbox ...'
      end
      # resource path
      local_var_path = '/inboxes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_inbox'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"InboxesApi.create_inbox",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#create_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create team inbox
    # Create an inbox for a team (workspace).
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateInbox] :create_inbox Inbox details
    # @return [nil]
    def create_team_inbox(team_id, opts = {})
      create_team_inbox_with_http_info(team_id, opts)
      nil
    end

    # Create team inbox
    # Create an inbox for a team (workspace).
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateInbox] :create_inbox Inbox details
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_team_inbox_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.create_team_inbox ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling InboxesApi.create_team_inbox"
      end
      # resource path
      local_var_path = '/teams/{team_id}/inboxes'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_inbox'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"InboxesApi.create_team_inbox",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#create_team_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get inbox
    # Fetch an inbox.
    # @param inbox_id [String] The Inbox ID
    # @param [Hash] opts the optional parameters
    # @return [InboxResponse]
    def get_inbox(inbox_id, opts = {})
      data, _status_code, _headers = get_inbox_with_http_info(inbox_id, opts)
      data
    end

    # Get inbox
    # Fetch an inbox.
    # @param inbox_id [String] The Inbox ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboxResponse, Integer, Hash)>] InboxResponse data, response status code and response headers
    def get_inbox_with_http_info(inbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.get_inbox ...'
      end
      # verify the required parameter 'inbox_id' is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbox_id' when calling InboxesApi.get_inbox"
      end
      # resource path
      local_var_path = '/inboxes/{inbox_id}'.sub('{' + 'inbox_id' + '}', CGI.escape(inbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InboxResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"InboxesApi.get_inbox",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#get_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List inbox access
    # List the teammates with access to an inbox.
    # @param inbox_id [String] The Inbox ID
    # @param [Hash] opts the optional parameters
    # @return [ListCommentMentions200Response]
    def list_inbox_access(inbox_id, opts = {})
      data, _status_code, _headers = list_inbox_access_with_http_info(inbox_id, opts)
      data
    end

    # List inbox access
    # List the teammates with access to an inbox.
    # @param inbox_id [String] The Inbox ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListCommentMentions200Response, Integer, Hash)>] ListCommentMentions200Response data, response status code and response headers
    def list_inbox_access_with_http_info(inbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.list_inbox_access ...'
      end
      # verify the required parameter 'inbox_id' is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbox_id' when calling InboxesApi.list_inbox_access"
      end
      # resource path
      local_var_path = '/inboxes/{inbox_id}/teammates'.sub('{' + 'inbox_id' + '}', CGI.escape(inbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCommentMentions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"InboxesApi.list_inbox_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#list_inbox_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List inbox channels
    # List the channels in an inbox.
    # @param inbox_id [String] The Inbox ID
    # @param [Hash] opts the optional parameters
    # @return [ListChannels200Response]
    def list_inbox_channels(inbox_id, opts = {})
      data, _status_code, _headers = list_inbox_channels_with_http_info(inbox_id, opts)
      data
    end

    # List inbox channels
    # List the channels in an inbox.
    # @param inbox_id [String] The Inbox ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListChannels200Response, Integer, Hash)>] ListChannels200Response data, response status code and response headers
    def list_inbox_channels_with_http_info(inbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.list_inbox_channels ...'
      end
      # verify the required parameter 'inbox_id' is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbox_id' when calling InboxesApi.list_inbox_channels"
      end
      # resource path
      local_var_path = '/inboxes/{inbox_id}/channels'.sub('{' + 'inbox_id' + '}', CGI.escape(inbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListChannels200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"InboxesApi.list_inbox_channels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#list_inbox_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List inbox conversations
    # List the conversations in an inbox. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
    # @param inbox_id [String] The Inbox ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property &#x60;statuses&#x60;, whose value should be a list of conversation statuses (&#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;archived&#x60;, or &#x60;deleted&#x60;).
    # @option opts [Integer] :limit Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    # @return [ListContactConversations200Response]
    def list_inbox_conversations(inbox_id, opts = {})
      data, _status_code, _headers = list_inbox_conversations_with_http_info(inbox_id, opts)
      data
    end

    # List inbox conversations
    # List the conversations in an inbox. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
    # @param inbox_id [String] The Inbox ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property &#x60;statuses&#x60;, whose value should be a list of conversation statuses (&#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;archived&#x60;, or &#x60;deleted&#x60;).
    # @option opts [Integer] :limit Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    # @return [Array<(ListContactConversations200Response, Integer, Hash)>] ListContactConversations200Response data, response status code and response headers
    def list_inbox_conversations_with_http_info(inbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.list_inbox_conversations ...'
      end
      # verify the required parameter 'inbox_id' is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbox_id' when calling InboxesApi.list_inbox_conversations"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling InboxesApi.list_inbox_conversations, must be smaller than or equal to 100.'
      end

      # resource path
      local_var_path = '/inboxes/{inbox_id}/conversations'.sub('{' + 'inbox_id' + '}', CGI.escape(inbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListContactConversations200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"InboxesApi.list_inbox_conversations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#list_inbox_conversations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List inboxes
    # List the inboxes of the company.
    # @param [Hash] opts the optional parameters
    # @return [ListConversationInboxes200Response]
    def list_inboxes(opts = {})
      data, _status_code, _headers = list_inboxes_with_http_info(opts)
      data
    end

    # List inboxes
    # List the inboxes of the company.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListConversationInboxes200Response, Integer, Hash)>] ListConversationInboxes200Response data, response status code and response headers
    def list_inboxes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.list_inboxes ...'
      end
      # resource path
      local_var_path = '/inboxes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListConversationInboxes200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"InboxesApi.list_inboxes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#list_inboxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List team inboxes
    # List the inboxes belonging to a team (workspace).
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @return [ListConversationInboxes200Response]
    def list_team_inboxes(team_id, opts = {})
      data, _status_code, _headers = list_team_inboxes_with_http_info(team_id, opts)
      data
    end

    # List team inboxes
    # List the inboxes belonging to a team (workspace).
    # @param team_id [String] The team ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListConversationInboxes200Response, Integer, Hash)>] ListConversationInboxes200Response data, response status code and response headers
    def list_team_inboxes_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.list_team_inboxes ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling InboxesApi.list_team_inboxes"
      end
      # resource path
      local_var_path = '/teams/{team_id}/inboxes'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListConversationInboxes200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"InboxesApi.list_team_inboxes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#list_team_inboxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes inbox access
    # Remove access of one or more teammates from an inbox.
    # @param inbox_id [String] The Inbox ID
    # @param [Hash] opts the optional parameters
    # @option opts [TeammateIds] :teammate_ids Teammate IDs to remove. Alternatively, you can supply teammate emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @return [nil]
    def removes_inbox_access(inbox_id, opts = {})
      removes_inbox_access_with_http_info(inbox_id, opts)
      nil
    end

    # Removes inbox access
    # Remove access of one or more teammates from an inbox.
    # @param inbox_id [String] The Inbox ID
    # @param [Hash] opts the optional parameters
    # @option opts [TeammateIds] :teammate_ids Teammate IDs to remove. Alternatively, you can supply teammate emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def removes_inbox_access_with_http_info(inbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxesApi.removes_inbox_access ...'
      end
      # verify the required parameter 'inbox_id' is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbox_id' when calling InboxesApi.removes_inbox_access"
      end
      # resource path
      local_var_path = '/inboxes/{inbox_id}/teammates'.sub('{' + 'inbox_id' + '}', CGI.escape(inbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'teammate_ids'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"InboxesApi.removes_inbox_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxesApi#removes_inbox_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
