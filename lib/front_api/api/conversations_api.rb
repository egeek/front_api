=begin
#Core API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module FrontApi
  class ConversationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add conversation followers
    # Adds teammates to the list of followers of a conversation.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [AddConversationFollowersRequest] :add_conversation_followers_request 
    # @return [nil]
    def add_conversation_followers(conversation_id, opts = {})
      add_conversation_followers_with_http_info(conversation_id, opts)
      nil
    end

    # Add conversation followers
    # Adds teammates to the list of followers of a conversation.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [AddConversationFollowersRequest] :add_conversation_followers_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_conversation_followers_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.add_conversation_followers ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.add_conversation_followers"
      end
      # resource path
      local_var_path = '/conversations/{conversation_id}/followers'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_conversation_followers_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ConversationsApi.add_conversation_followers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#add_conversation_followers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add conversation link
    # Adds one or more links to a conversation
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [AddConversationLinkRequest] :add_conversation_link_request 
    # @return [nil]
    def add_conversation_link(conversation_id, opts = {})
      add_conversation_link_with_http_info(conversation_id, opts)
      nil
    end

    # Add conversation link
    # Adds one or more links to a conversation
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [AddConversationLinkRequest] :add_conversation_link_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_conversation_link_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.add_conversation_link ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.add_conversation_link"
      end
      # resource path
      local_var_path = '/conversations/{conversation_id}/links'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'add_conversation_link_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ConversationsApi.add_conversation_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#add_conversation_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add conversation tag
    # Adds one or more tags to a conversation
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [TagIds] :tag_ids Tag IDs to add
    # @return [nil]
    def add_conversation_tag(conversation_id, opts = {})
      add_conversation_tag_with_http_info(conversation_id, opts)
      nil
    end

    # Add conversation tag
    # Adds one or more tags to a conversation
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [TagIds] :tag_ids Tag IDs to add
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_conversation_tag_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.add_conversation_tag ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.add_conversation_tag"
      end
      # resource path
      local_var_path = '/conversations/{conversation_id}/tags'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'tag_ids'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ConversationsApi.add_conversation_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#add_conversation_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create discussion conversation
    # Create a new [conversation](https://dev.frontapp.com/reference/conversations#creating-a-new-conversation) that only supports comments (known as discussions in Front). If you want to create a conversation that supports messages, use the [Create message](https://dev.frontapp.com/reference/post_channels-channel-id-messages) endpoint. If you want to add a comment to an existing conversation, use the [Add comment](https://dev.frontapp.com/reference/post_conversations-conversation-id-comments) endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateConversation] :create_conversation 
    # @return [ConversationResponse]
    def create_conversation(opts = {})
      data, _status_code, _headers = create_conversation_with_http_info(opts)
      data
    end

    # Create discussion conversation
    # Create a new [conversation](https://dev.frontapp.com/reference/conversations#creating-a-new-conversation) that only supports comments (known as discussions in Front). If you want to create a conversation that supports messages, use the [Create message](https://dev.frontapp.com/reference/post_channels-channel-id-messages) endpoint. If you want to add a comment to an existing conversation, use the [Add comment](https://dev.frontapp.com/reference/post_conversations-conversation-id-comments) endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateConversation] :create_conversation 
    # @return [Array<(ConversationResponse, Integer, Hash)>] ConversationResponse data, response status code and response headers
    def create_conversation_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.create_conversation ...'
      end
      # resource path
      local_var_path = '/conversations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_conversation'])

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ConversationsApi.create_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#create_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete conversation followers
    # Removes teammates from the list of followers of a conversation.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [DeleteConversationFollowersRequest] :delete_conversation_followers_request 
    # @return [nil]
    def delete_conversation_followers(conversation_id, opts = {})
      delete_conversation_followers_with_http_info(conversation_id, opts)
      nil
    end

    # Delete conversation followers
    # Removes teammates from the list of followers of a conversation.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [DeleteConversationFollowersRequest] :delete_conversation_followers_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_conversation_followers_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.delete_conversation_followers ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.delete_conversation_followers"
      end
      # resource path
      local_var_path = '/conversations/{conversation_id}/followers'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_conversation_followers_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ConversationsApi.delete_conversation_followers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#delete_conversation_followers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get conversation
    # Fetch a conversation. 
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @return [ConversationResponse]
    def get_conversation_by_id(conversation_id, opts = {})
      data, _status_code, _headers = get_conversation_by_id_with_http_info(conversation_id, opts)
      data
    end

    # Get conversation
    # Fetch a conversation. 
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationResponse, Integer, Hash)>] ConversationResponse data, response status code and response headers
    def get_conversation_by_id_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.get_conversation_by_id ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversation_by_id"
      end
      # resource path
      local_var_path = '/conversations/{conversation_id}'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConversationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ConversationsApi.get_conversation_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversation_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List conversation events
    # List the events that occured for a conversation in reverse chronological order (newest first). The order will respect your company's [bump settings](https://help.front.com/t/y729th/customize-when-conversations-bump-up), which determine when conversations bump to the top.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    # @return [ListConversationEvents200Response]
    def list_conversation_events(conversation_id, opts = {})
      data, _status_code, _headers = list_conversation_events_with_http_info(conversation_id, opts)
      data
    end

    # List conversation events
    # List the events that occured for a conversation in reverse chronological order (newest first). The order will respect your company&#39;s [bump settings](https://help.front.com/t/y729th/customize-when-conversations-bump-up), which determine when conversations bump to the top.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    # @return [Array<(ListConversationEvents200Response, Integer, Hash)>] ListConversationEvents200Response data, response status code and response headers
    def list_conversation_events_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.list_conversation_events ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.list_conversation_events"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ConversationsApi.list_conversation_events, must be smaller than or equal to 100.'
      end

      # resource path
      local_var_path = '/conversations/{conversation_id}/events'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListConversationEvents200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ConversationsApi.list_conversation_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#list_conversation_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List conversation followers
    # List the teammates following a conversation.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @return [ListCommentMentions200Response]
    def list_conversation_followers(conversation_id, opts = {})
      data, _status_code, _headers = list_conversation_followers_with_http_info(conversation_id, opts)
      data
    end

    # List conversation followers
    # List the teammates following a conversation.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListCommentMentions200Response, Integer, Hash)>] ListCommentMentions200Response data, response status code and response headers
    def list_conversation_followers_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.list_conversation_followers ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.list_conversation_followers"
      end
      # resource path
      local_var_path = '/conversations/{conversation_id}/followers'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCommentMentions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ConversationsApi.list_conversation_followers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#list_conversation_followers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List conversation inboxes
    # List the inboxes in which a conversation is listed.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @return [ListConversationInboxes200Response]
    def list_conversation_inboxes(conversation_id, opts = {})
      data, _status_code, _headers = list_conversation_inboxes_with_http_info(conversation_id, opts)
      data
    end

    # List conversation inboxes
    # List the inboxes in which a conversation is listed.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListConversationInboxes200Response, Integer, Hash)>] ListConversationInboxes200Response data, response status code and response headers
    def list_conversation_inboxes_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.list_conversation_inboxes ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.list_conversation_inboxes"
      end
      # resource path
      local_var_path = '/conversations/{conversation_id}/inboxes'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListConversationInboxes200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ConversationsApi.list_conversation_inboxes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#list_conversation_inboxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List conversation messages
    # List the messages in a conversation in reverse chronological order (newest first).
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :sort_by Field used to sort the messages. Only supports &#x60;created_at&#x60;.
    # @option opts [String] :sort_order Order by which results should be sorted
    # @return [ListConversationDrafts200Response]
    def list_conversation_messages(conversation_id, opts = {})
      data, _status_code, _headers = list_conversation_messages_with_http_info(conversation_id, opts)
      data
    end

    # List conversation messages
    # List the messages in a conversation in reverse chronological order (newest first).
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :sort_by Field used to sort the messages. Only supports &#x60;created_at&#x60;.
    # @option opts [String] :sort_order Order by which results should be sorted
    # @return [Array<(ListConversationDrafts200Response, Integer, Hash)>] ListConversationDrafts200Response data, response status code and response headers
    def list_conversation_messages_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.list_conversation_messages ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.list_conversation_messages"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ConversationsApi.list_conversation_messages, must be smaller than or equal to 100.'
      end

      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !allowable_values.include?(opts[:'sort_order'])
        fail ArgumentError, "invalid value for \"sort_order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/conversations/{conversation_id}/messages'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListConversationDrafts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ConversationsApi.list_conversation_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#list_conversation_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List conversations
    # List the conversations in the company in reverse chronological order (most recently updated first). The order will respect your company's [bump settings](https://help.front.com/t/y729th/customize-when-conversations-bump-up), which determine when conversations bump to the top. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property &#x60;statuses&#x60;, whose value should be a list of conversation statuses (&#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;archived&#x60;, or &#x60;deleted&#x60;).
    # @option opts [Integer] :limit Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :sort_by Field used to sort the conversations. Only supports &#x60;date&#x60;.
    # @option opts [String] :sort_order Order by which results should be sorted
    # @return [ListContactConversations200Response]
    def list_conversations(opts = {})
      data, _status_code, _headers = list_conversations_with_http_info(opts)
      data
    end

    # List conversations
    # List the conversations in the company in reverse chronological order (most recently updated first). The order will respect your company&#39;s [bump settings](https://help.front.com/t/y729th/customize-when-conversations-bump-up), which determine when conversations bump to the top. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property &#x60;statuses&#x60;, whose value should be a list of conversation statuses (&#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;archived&#x60;, or &#x60;deleted&#x60;).
    # @option opts [Integer] :limit Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :sort_by Field used to sort the conversations. Only supports &#x60;date&#x60;.
    # @option opts [String] :sort_order Order by which results should be sorted
    # @return [Array<(ListContactConversations200Response, Integer, Hash)>] ListContactConversations200Response data, response status code and response headers
    def list_conversations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.list_conversations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ConversationsApi.list_conversations, must be smaller than or equal to 100.'
      end

      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !allowable_values.include?(opts[:'sort_order'])
        fail ArgumentError, "invalid value for \"sort_order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/conversations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListContactConversations200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ConversationsApi.list_conversations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#list_conversations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove conversation links
    # Removes one or more links to a conversation
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [RemoveConversationLinksRequest] :remove_conversation_links_request 
    # @return [nil]
    def remove_conversation_links(conversation_id, opts = {})
      remove_conversation_links_with_http_info(conversation_id, opts)
      nil
    end

    # Remove conversation links
    # Removes one or more links to a conversation
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [RemoveConversationLinksRequest] :remove_conversation_links_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_conversation_links_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.remove_conversation_links ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.remove_conversation_links"
      end
      # resource path
      local_var_path = '/conversations/{conversation_id}/links'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'remove_conversation_links_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ConversationsApi.remove_conversation_links",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#remove_conversation_links\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove conversation tag
    # Removes one or more tags to a conversation
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [TagIds] :tag_ids Tag IDs to remove
    # @return [nil]
    def remove_conversation_tag(conversation_id, opts = {})
      remove_conversation_tag_with_http_info(conversation_id, opts)
      nil
    end

    # Remove conversation tag
    # Removes one or more tags to a conversation
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [TagIds] :tag_ids Tag IDs to remove
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_conversation_tag_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.remove_conversation_tag ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.remove_conversation_tag"
      end
      # resource path
      local_var_path = '/conversations/{conversation_id}/tags'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'tag_ids'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ConversationsApi.remove_conversation_tag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#remove_conversation_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search conversations
    # Search for conversations. Response will include a count of total matches and an array of conversations in descending order by last activity. See the [search syntax documentation](https://dev.frontapp.com/docs/search-1) for usage examples. **Note:** This endpoint is subject to [proportional rate limiting](https://dev.frontapp.com/docs/rate-limiting#additional-proportional-limiting) at 40% of your company's rate limit. 
    # @param query [String] Search query string. See [Search](https://dev.frontapp.com/docs/search-1) topic for usage details.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    # @return [SearchConversations200Response]
    def search_conversations(query, opts = {})
      data, _status_code, _headers = search_conversations_with_http_info(query, opts)
      data
    end

    # Search conversations
    # Search for conversations. Response will include a count of total matches and an array of conversations in descending order by last activity. See the [search syntax documentation](https://dev.frontapp.com/docs/search-1) for usage examples. **Note:** This endpoint is subject to [proportional rate limiting](https://dev.frontapp.com/docs/rate-limiting#additional-proportional-limiting) at 40% of your company&#39;s rate limit. 
    # @param query [String] Search query string. See [Search](https://dev.frontapp.com/docs/search-1) topic for usage details.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Max number of results per [page](https://dev.frontapp.com/docs/pagination)
    # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
    # @return [Array<(SearchConversations200Response, Integer, Hash)>] SearchConversations200Response data, response status code and response headers
    def search_conversations_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.search_conversations ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling ConversationsApi.search_conversations"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ConversationsApi.search_conversations, must be smaller than or equal to 100.'
      end

      # resource path
      local_var_path = '/conversations/search/{query}'.sub('{' + 'query' + '}', CGI.escape(query.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page_token'] = opts[:'page_token'] if !opts[:'page_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchConversations200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ConversationsApi.search_conversations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#search_conversations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update conversation
    # Update a conversation.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateConversation] :update_conversation 
    # @return [nil]
    def update_conversation(conversation_id, opts = {})
      update_conversation_with_http_info(conversation_id, opts)
      nil
    end

    # Update conversation
    # Update a conversation.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateConversation] :update_conversation 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_conversation_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.update_conversation ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.update_conversation"
      end
      # resource path
      local_var_path = '/conversations/{conversation_id}'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_conversation'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ConversationsApi.update_conversation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#update_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update conversation assignee
    # Assign or unassign a conversation.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateConversationAssignee] :update_conversation_assignee 
    # @return [nil]
    def update_conversation_assignee(conversation_id, opts = {})
      update_conversation_assignee_with_http_info(conversation_id, opts)
      nil
    end

    # Update conversation assignee
    # Assign or unassign a conversation.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateConversationAssignee] :update_conversation_assignee 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_conversation_assignee_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.update_conversation_assignee ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.update_conversation_assignee"
      end
      # resource path
      local_var_path = '/conversations/{conversation_id}/assignee'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_conversation_assignee'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ConversationsApi.update_conversation_assignee",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#update_conversation_assignee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update conversation reminders
    # Snooze or unsnooze a conversation for the provided user. For private conversations, reminders can only be created and edited through the API for teammates that own the conversation. For shared conversations, reminders created and edited through the API are shared for all teammates within the shared inbox(es) that the conversation belongs to. 
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateConversationReminders] :update_conversation_reminders 
    # @return [nil]
    def update_conversation_reminders(conversation_id, opts = {})
      update_conversation_reminders_with_http_info(conversation_id, opts)
      nil
    end

    # Update conversation reminders
    # Snooze or unsnooze a conversation for the provided user. For private conversations, reminders can only be created and edited through the API for teammates that own the conversation. For shared conversations, reminders created and edited through the API are shared for all teammates within the shared inbox(es) that the conversation belongs to. 
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateConversationReminders] :update_conversation_reminders 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_conversation_reminders_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.update_conversation_reminders ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.update_conversation_reminders"
      end
      # resource path
      local_var_path = '/conversations/{conversation_id}/reminders'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_conversation_reminders'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"ConversationsApi.update_conversation_reminders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#update_conversation_reminders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
