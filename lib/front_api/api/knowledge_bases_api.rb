=begin
#Core API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module FrontApi
  class KnowledgeBasesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a knowledge base
    # Creates a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param [Hash] opts the optional parameters
    # @option opts [KnowledgeBaseCreate] :knowledge_base_create 
    # @return [KnowledgeBaseResponse]
    def create_a_knowledge_base(opts = {})
      data, _status_code, _headers = create_a_knowledge_base_with_http_info(opts)
      data
    end

    # Create a knowledge base
    # Creates a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param [Hash] opts the optional parameters
    # @option opts [KnowledgeBaseCreate] :knowledge_base_create 
    # @return [Array<(KnowledgeBaseResponse, Integer, Hash)>] KnowledgeBaseResponse data, response status code and response headers
    def create_a_knowledge_base_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBasesApi.create_a_knowledge_base ...'
      end
      # resource path
      local_var_path = '/knowledge_bases'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'knowledge_base_create'])

      # return_type
      return_type = opts[:debug_return_type] || 'KnowledgeBaseResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBasesApi.create_a_knowledge_base",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBasesApi#create_a_knowledge_base\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create article in a knowledge base in default locale
    # Creates an article in a knowledge base in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base to create the article in
    # @param [Hash] opts the optional parameters
    # @option opts [KnowledgeBaseArticleCreate] :knowledge_base_article_create 
    # @return [KnowledgeBaseArticleResponse]
    def create_article_in_a_knowledge_base_in_default_locale(knowledge_base_id, opts = {})
      data, _status_code, _headers = create_article_in_a_knowledge_base_in_default_locale_with_http_info(knowledge_base_id, opts)
      data
    end

    # Create article in a knowledge base in default locale
    # Creates an article in a knowledge base in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base to create the article in
    # @param [Hash] opts the optional parameters
    # @option opts [KnowledgeBaseArticleCreate] :knowledge_base_article_create 
    # @return [Array<(KnowledgeBaseArticleResponse, Integer, Hash)>] KnowledgeBaseArticleResponse data, response status code and response headers
    def create_article_in_a_knowledge_base_in_default_locale_with_http_info(knowledge_base_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBasesApi.create_article_in_a_knowledge_base_in_default_locale ...'
      end
      # verify the required parameter 'knowledge_base_id' is set
      if @api_client.config.client_side_validation && knowledge_base_id.nil?
        fail ArgumentError, "Missing the required parameter 'knowledge_base_id' when calling KnowledgeBasesApi.create_article_in_a_knowledge_base_in_default_locale"
      end
      # resource path
      local_var_path = '/knowledge_bases/{knowledge_base_id}/articles'.sub('{' + 'knowledge_base_id' + '}', CGI.escape(knowledge_base_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'knowledge_base_article_create'])

      # return_type
      return_type = opts[:debug_return_type] || 'KnowledgeBaseArticleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBasesApi.create_article_in_a_knowledge_base_in_default_locale",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBasesApi#create_article_in_a_knowledge_base_in_default_locale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create article in a knowledge base in specified locale
    # Create an article for a given locale in a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base to create the article in
    # @param locale [String] The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the article&#39;s content
    # @param [Hash] opts the optional parameters
    # @option opts [KnowledgeBaseArticleCreate] :knowledge_base_article_create 
    # @return [KnowledgeBaseArticleResponse]
    def create_article_in_a_knowledge_base_in_specified_locale(knowledge_base_id, locale, opts = {})
      data, _status_code, _headers = create_article_in_a_knowledge_base_in_specified_locale_with_http_info(knowledge_base_id, locale, opts)
      data
    end

    # Create article in a knowledge base in specified locale
    # Create an article for a given locale in a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base to create the article in
    # @param locale [String] The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the article&#39;s content
    # @param [Hash] opts the optional parameters
    # @option opts [KnowledgeBaseArticleCreate] :knowledge_base_article_create 
    # @return [Array<(KnowledgeBaseArticleResponse, Integer, Hash)>] KnowledgeBaseArticleResponse data, response status code and response headers
    def create_article_in_a_knowledge_base_in_specified_locale_with_http_info(knowledge_base_id, locale, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBasesApi.create_article_in_a_knowledge_base_in_specified_locale ...'
      end
      # verify the required parameter 'knowledge_base_id' is set
      if @api_client.config.client_side_validation && knowledge_base_id.nil?
        fail ArgumentError, "Missing the required parameter 'knowledge_base_id' when calling KnowledgeBasesApi.create_article_in_a_knowledge_base_in_specified_locale"
      end
      # verify the required parameter 'locale' is set
      if @api_client.config.client_side_validation && locale.nil?
        fail ArgumentError, "Missing the required parameter 'locale' when calling KnowledgeBasesApi.create_article_in_a_knowledge_base_in_specified_locale"
      end
      # resource path
      local_var_path = '/knowledge_bases/{knowledge_base_id}/locales/{locale}/articles'.sub('{' + 'knowledge_base_id' + '}', CGI.escape(knowledge_base_id.to_s)).sub('{' + 'locale' + '}', CGI.escape(locale.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'knowledge_base_article_create'])

      # return_type
      return_type = opts[:debug_return_type] || 'KnowledgeBaseArticleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBasesApi.create_article_in_a_knowledge_base_in_specified_locale",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBasesApi#create_article_in_a_knowledge_base_in_specified_locale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create knowledge base category in default locale
    # Creates a knowledge base category in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base to create the category in
    # @param [Hash] opts the optional parameters
    # @option opts [KnowledgeBaseCategoryCreate] :knowledge_base_category_create 
    # @return [KnowledgeBaseCategoryResponse]
    def create_knowledge_base_category_in_default_locale(knowledge_base_id, opts = {})
      data, _status_code, _headers = create_knowledge_base_category_in_default_locale_with_http_info(knowledge_base_id, opts)
      data
    end

    # Create knowledge base category in default locale
    # Creates a knowledge base category in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base to create the category in
    # @param [Hash] opts the optional parameters
    # @option opts [KnowledgeBaseCategoryCreate] :knowledge_base_category_create 
    # @return [Array<(KnowledgeBaseCategoryResponse, Integer, Hash)>] KnowledgeBaseCategoryResponse data, response status code and response headers
    def create_knowledge_base_category_in_default_locale_with_http_info(knowledge_base_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBasesApi.create_knowledge_base_category_in_default_locale ...'
      end
      # verify the required parameter 'knowledge_base_id' is set
      if @api_client.config.client_side_validation && knowledge_base_id.nil?
        fail ArgumentError, "Missing the required parameter 'knowledge_base_id' when calling KnowledgeBasesApi.create_knowledge_base_category_in_default_locale"
      end
      # resource path
      local_var_path = '/knowledge_bases/{knowledge_base_id}/categories'.sub('{' + 'knowledge_base_id' + '}', CGI.escape(knowledge_base_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'knowledge_base_category_create'])

      # return_type
      return_type = opts[:debug_return_type] || 'KnowledgeBaseCategoryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBasesApi.create_knowledge_base_category_in_default_locale",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBasesApi#create_knowledge_base_category_in_default_locale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create knowledge base category in specified locale
    # Creates a knowledge base category for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base to create the category in
    # @param locale [String] The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the category&#39;s content
    # @param [Hash] opts the optional parameters
    # @option opts [KnowledgeBaseCategoryCreate] :knowledge_base_category_create 
    # @return [KnowledgeBaseCategoryResponse]
    def create_knowledge_base_category_in_specified_locale(knowledge_base_id, locale, opts = {})
      data, _status_code, _headers = create_knowledge_base_category_in_specified_locale_with_http_info(knowledge_base_id, locale, opts)
      data
    end

    # Create knowledge base category in specified locale
    # Creates a knowledge base category for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base to create the category in
    # @param locale [String] The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the category&#39;s content
    # @param [Hash] opts the optional parameters
    # @option opts [KnowledgeBaseCategoryCreate] :knowledge_base_category_create 
    # @return [Array<(KnowledgeBaseCategoryResponse, Integer, Hash)>] KnowledgeBaseCategoryResponse data, response status code and response headers
    def create_knowledge_base_category_in_specified_locale_with_http_info(knowledge_base_id, locale, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBasesApi.create_knowledge_base_category_in_specified_locale ...'
      end
      # verify the required parameter 'knowledge_base_id' is set
      if @api_client.config.client_side_validation && knowledge_base_id.nil?
        fail ArgumentError, "Missing the required parameter 'knowledge_base_id' when calling KnowledgeBasesApi.create_knowledge_base_category_in_specified_locale"
      end
      # verify the required parameter 'locale' is set
      if @api_client.config.client_side_validation && locale.nil?
        fail ArgumentError, "Missing the required parameter 'locale' when calling KnowledgeBasesApi.create_knowledge_base_category_in_specified_locale"
      end
      # resource path
      local_var_path = '/knowledge_bases/{knowledge_base_id}/locales/{locale}/categories'.sub('{' + 'knowledge_base_id' + '}', CGI.escape(knowledge_base_id.to_s)).sub('{' + 'locale' + '}', CGI.escape(locale.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'knowledge_base_category_create'])

      # return_type
      return_type = opts[:debug_return_type] || 'KnowledgeBaseCategoryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBasesApi.create_knowledge_base_category_in_specified_locale",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBasesApi#create_knowledge_base_category_in_specified_locale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a knowledge base
    # Fetches a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base to fetch
    # @param [Hash] opts the optional parameters
    # @return [KnowledgeBaseSlimResponse]
    def get_a_knowledge_base(knowledge_base_id, opts = {})
      data, _status_code, _headers = get_a_knowledge_base_with_http_info(knowledge_base_id, opts)
      data
    end

    # Get a knowledge base
    # Fetches a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base to fetch
    # @param [Hash] opts the optional parameters
    # @return [Array<(KnowledgeBaseSlimResponse, Integer, Hash)>] KnowledgeBaseSlimResponse data, response status code and response headers
    def get_a_knowledge_base_with_http_info(knowledge_base_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBasesApi.get_a_knowledge_base ...'
      end
      # verify the required parameter 'knowledge_base_id' is set
      if @api_client.config.client_side_validation && knowledge_base_id.nil?
        fail ArgumentError, "Missing the required parameter 'knowledge_base_id' when calling KnowledgeBasesApi.get_a_knowledge_base"
      end
      # resource path
      local_var_path = '/knowledge_bases/{knowledge_base_id}'.sub('{' + 'knowledge_base_id' + '}', CGI.escape(knowledge_base_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KnowledgeBaseSlimResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBasesApi.get_a_knowledge_base",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBasesApi#get_a_knowledge_base\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a knowledge base with content in default locale
    # Fetches a knowledge base with its content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base to fetch
    # @param [Hash] opts the optional parameters
    # @return [KnowledgeBaseResponse]
    def get_a_knowledge_base_with_content_in_default_locale(knowledge_base_id, opts = {})
      data, _status_code, _headers = get_a_knowledge_base_with_content_in_default_locale_with_http_info(knowledge_base_id, opts)
      data
    end

    # Get a knowledge base with content in default locale
    # Fetches a knowledge base with its content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base to fetch
    # @param [Hash] opts the optional parameters
    # @return [Array<(KnowledgeBaseResponse, Integer, Hash)>] KnowledgeBaseResponse data, response status code and response headers
    def get_a_knowledge_base_with_content_in_default_locale_with_http_info(knowledge_base_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBasesApi.get_a_knowledge_base_with_content_in_default_locale ...'
      end
      # verify the required parameter 'knowledge_base_id' is set
      if @api_client.config.client_side_validation && knowledge_base_id.nil?
        fail ArgumentError, "Missing the required parameter 'knowledge_base_id' when calling KnowledgeBasesApi.get_a_knowledge_base_with_content_in_default_locale"
      end
      # resource path
      local_var_path = '/knowledge_bases/{knowledge_base_id}/content'.sub('{' + 'knowledge_base_id' + '}', CGI.escape(knowledge_base_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KnowledgeBaseResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBasesApi.get_a_knowledge_base_with_content_in_default_locale",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBasesApi#get_a_knowledge_base_with_content_in_default_locale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a knowledge base with content in specified locale
    # Fetches a knowledge base with its content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base to fetch
    # @param locale [String] The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch
    # @param [Hash] opts the optional parameters
    # @return [KnowledgeBaseResponse]
    def get_a_knowledge_base_with_content_in_specified_locale(knowledge_base_id, locale, opts = {})
      data, _status_code, _headers = get_a_knowledge_base_with_content_in_specified_locale_with_http_info(knowledge_base_id, locale, opts)
      data
    end

    # Get a knowledge base with content in specified locale
    # Fetches a knowledge base with its content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base to fetch
    # @param locale [String] The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch
    # @param [Hash] opts the optional parameters
    # @return [Array<(KnowledgeBaseResponse, Integer, Hash)>] KnowledgeBaseResponse data, response status code and response headers
    def get_a_knowledge_base_with_content_in_specified_locale_with_http_info(knowledge_base_id, locale, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBasesApi.get_a_knowledge_base_with_content_in_specified_locale ...'
      end
      # verify the required parameter 'knowledge_base_id' is set
      if @api_client.config.client_side_validation && knowledge_base_id.nil?
        fail ArgumentError, "Missing the required parameter 'knowledge_base_id' when calling KnowledgeBasesApi.get_a_knowledge_base_with_content_in_specified_locale"
      end
      # verify the required parameter 'locale' is set
      if @api_client.config.client_side_validation && locale.nil?
        fail ArgumentError, "Missing the required parameter 'locale' when calling KnowledgeBasesApi.get_a_knowledge_base_with_content_in_specified_locale"
      end
      # resource path
      local_var_path = '/knowledge_bases/{knowledge_base_id}/locales/{locale}/content'.sub('{' + 'knowledge_base_id' + '}', CGI.escape(knowledge_base_id.to_s)).sub('{' + 'locale' + '}', CGI.escape(locale.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KnowledgeBaseResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBasesApi.get_a_knowledge_base_with_content_in_specified_locale",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBasesApi#get_a_knowledge_base_with_content_in_specified_locale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List knowledge bases
    # List the knowledge bases of the company.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param [Hash] opts the optional parameters
    # @return [ListKnowledgeBases200Response]
    def list_knowledge_bases(opts = {})
      data, _status_code, _headers = list_knowledge_bases_with_http_info(opts)
      data
    end

    # List knowledge bases
    # List the knowledge bases of the company.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListKnowledgeBases200Response, Integer, Hash)>] ListKnowledgeBases200Response data, response status code and response headers
    def list_knowledge_bases_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBasesApi.list_knowledge_bases ...'
      end
      # resource path
      local_var_path = '/knowledge_bases'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListKnowledgeBases200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBasesApi.list_knowledge_bases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBasesApi#list_knowledge_bases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update knowledge base in default locale
    # Updates a knowledge base in the default locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base to update
    # @param [Hash] opts the optional parameters
    # @option opts [KnowledgeBasePatch] :knowledge_base_patch 
    # @return [KnowledgeBaseResponse]
    def update_knowledge_base_in_default_locale(knowledge_base_id, opts = {})
      data, _status_code, _headers = update_knowledge_base_in_default_locale_with_http_info(knowledge_base_id, opts)
      data
    end

    # Update knowledge base in default locale
    # Updates a knowledge base in the default locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base to update
    # @param [Hash] opts the optional parameters
    # @option opts [KnowledgeBasePatch] :knowledge_base_patch 
    # @return [Array<(KnowledgeBaseResponse, Integer, Hash)>] KnowledgeBaseResponse data, response status code and response headers
    def update_knowledge_base_in_default_locale_with_http_info(knowledge_base_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBasesApi.update_knowledge_base_in_default_locale ...'
      end
      # verify the required parameter 'knowledge_base_id' is set
      if @api_client.config.client_side_validation && knowledge_base_id.nil?
        fail ArgumentError, "Missing the required parameter 'knowledge_base_id' when calling KnowledgeBasesApi.update_knowledge_base_in_default_locale"
      end
      # resource path
      local_var_path = '/knowledge_bases/{knowledge_base_id}/content'.sub('{' + 'knowledge_base_id' + '}', CGI.escape(knowledge_base_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'knowledge_base_patch'])

      # return_type
      return_type = opts[:debug_return_type] || 'KnowledgeBaseResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBasesApi.update_knowledge_base_in_default_locale",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBasesApi#update_knowledge_base_in_default_locale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update knowledge base in specified locale
    # Updates a knowledge base for a given locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base to update
    # @param locale [String] The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content
    # @param [Hash] opts the optional parameters
    # @option opts [KnowledgeBasePatch] :knowledge_base_patch 
    # @return [KnowledgeBaseResponse]
    def update_knowledge_base_in_specified_locale(knowledge_base_id, locale, opts = {})
      data, _status_code, _headers = update_knowledge_base_in_specified_locale_with_http_info(knowledge_base_id, locale, opts)
      data
    end

    # Update knowledge base in specified locale
    # Updates a knowledge base for a given locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
    # @param knowledge_base_id [String] The ID of the knowledge base to update
    # @param locale [String] The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content
    # @param [Hash] opts the optional parameters
    # @option opts [KnowledgeBasePatch] :knowledge_base_patch 
    # @return [Array<(KnowledgeBaseResponse, Integer, Hash)>] KnowledgeBaseResponse data, response status code and response headers
    def update_knowledge_base_in_specified_locale_with_http_info(knowledge_base_id, locale, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeBasesApi.update_knowledge_base_in_specified_locale ...'
      end
      # verify the required parameter 'knowledge_base_id' is set
      if @api_client.config.client_side_validation && knowledge_base_id.nil?
        fail ArgumentError, "Missing the required parameter 'knowledge_base_id' when calling KnowledgeBasesApi.update_knowledge_base_in_specified_locale"
      end
      # verify the required parameter 'locale' is set
      if @api_client.config.client_side_validation && locale.nil?
        fail ArgumentError, "Missing the required parameter 'locale' when calling KnowledgeBasesApi.update_knowledge_base_in_specified_locale"
      end
      # resource path
      local_var_path = '/knowledge_bases/{knowledge_base_id}/locales/{locale}/content'.sub('{' + 'knowledge_base_id' + '}', CGI.escape(knowledge_base_id.to_s)).sub('{' + 'locale' + '}', CGI.escape(locale.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'knowledge_base_patch'])

      # return_type
      return_type = opts[:debug_return_type] || 'KnowledgeBaseResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"KnowledgeBasesApi.update_knowledge_base_in_specified_locale",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeBasesApi#update_knowledge_base_in_specified_locale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
