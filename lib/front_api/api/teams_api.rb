=begin
#Core API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module FrontApi
  class TeamsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add teammates to team
    # Add one or more teammates to a team (workspace).
    # @param team_id [String] The Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [TeammateIds] :teammate_ids Teammate IDs to add. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @return [nil]
    def add_teammates_to_team(team_id, opts = {})
      add_teammates_to_team_with_http_info(team_id, opts)
      nil
    end

    # Add teammates to team
    # Add one or more teammates to a team (workspace).
    # @param team_id [String] The Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [TeammateIds] :teammate_ids Teammate IDs to add. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_teammates_to_team_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.add_teammates_to_team ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.add_teammates_to_team"
      end
      # resource path
      local_var_path = '/teams/{team_id}/teammates'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'teammate_ids'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"TeamsApi.add_teammates_to_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#add_teammates_to_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get team
    # Fetch a team (workspace).
    # @param team_id [String] The Team ID
    # @param [Hash] opts the optional parameters
    # @return [TeamResponse]
    def get_team(team_id, opts = {})
      data, _status_code, _headers = get_team_with_http_info(team_id, opts)
      data
    end

    # Get team
    # Fetch a team (workspace).
    # @param team_id [String] The Team ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamResponse, Integer, Hash)>] TeamResponse data, response status code and response headers
    def get_team_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.get_team ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.get_team"
      end
      # resource path
      local_var_path = '/teams/{team_id}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TeamResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"TeamsApi.get_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List teams
    # List the teams (workspaces) in the company.
    # @param [Hash] opts the optional parameters
    # @return [ListCompanyTeammateGroupTeams200Response]
    def list_teams(opts = {})
      data, _status_code, _headers = list_teams_with_http_info(opts)
      data
    end

    # List teams
    # List the teams (workspaces) in the company.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListCompanyTeammateGroupTeams200Response, Integer, Hash)>] ListCompanyTeammateGroupTeams200Response data, response status code and response headers
    def list_teams_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.list_teams ...'
      end
      # resource path
      local_var_path = '/teams'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCompanyTeammateGroupTeams200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"TeamsApi.list_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#list_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove teammates from team
    # Remove one or more teammates from a team (workspace). Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @param team_id [String] The Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [TeammateIds] :teammate_ids Teammate IDs to remove from the team
    # @return [nil]
    def remove_teammates_from_team(team_id, opts = {})
      remove_teammates_from_team_with_http_info(team_id, opts)
      nil
    end

    # Remove teammates from team
    # Remove one or more teammates from a team (workspace). Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @param team_id [String] The Team ID
    # @param [Hash] opts the optional parameters
    # @option opts [TeammateIds] :teammate_ids Teammate IDs to remove from the team
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_teammates_from_team_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.remove_teammates_from_team ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.remove_teammates_from_team"
      end
      # resource path
      local_var_path = '/teams/{team_id}/teammates'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'teammate_ids'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"TeamsApi.remove_teammates_from_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#remove_teammates_from_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
