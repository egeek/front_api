=begin
#Core API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module FrontApi
  class DraftsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create draft
    # Create a draft message which is the first message of a new [conversation](https://dev.frontapp.com/reference/conversations).
    # @param channel_id [String] The channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @param [Hash] opts the optional parameters
    # @option opts [CreateDraft] :create_draft 
    # @return [MessageResponse]
    def create_draft(channel_id, opts = {})
      data, _status_code, _headers = create_draft_with_http_info(channel_id, opts)
      data
    end

    # Create draft
    # Create a draft message which is the first message of a new [conversation](https://dev.frontapp.com/reference/conversations).
    # @param channel_id [String] The channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
    # @param [Hash] opts the optional parameters
    # @option opts [CreateDraft] :create_draft 
    # @return [Array<(MessageResponse, Integer, Hash)>] MessageResponse data, response status code and response headers
    def create_draft_with_http_info(channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DraftsApi.create_draft ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling DraftsApi.create_draft"
      end
      # resource path
      local_var_path = '/channels/{channel_id}/drafts'.sub('{' + 'channel_id' + '}', CGI.escape(channel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_draft'])

      # return_type
      return_type = opts[:debug_return_type] || 'MessageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"DraftsApi.create_draft",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DraftsApi#create_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create draft reply
    # Create a new draft as a reply to the last message in the conversation.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [ReplyDraft] :reply_draft 
    # @return [MessageResponse]
    def create_draft_reply(conversation_id, opts = {})
      data, _status_code, _headers = create_draft_reply_with_http_info(conversation_id, opts)
      data
    end

    # Create draft reply
    # Create a new draft as a reply to the last message in the conversation.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [ReplyDraft] :reply_draft 
    # @return [Array<(MessageResponse, Integer, Hash)>] MessageResponse data, response status code and response headers
    def create_draft_reply_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DraftsApi.create_draft_reply ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling DraftsApi.create_draft_reply"
      end
      # resource path
      local_var_path = '/conversations/{conversation_id}/drafts'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'reply_draft'])

      # return_type
      return_type = opts[:debug_return_type] || 'MessageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"DraftsApi.create_draft_reply",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DraftsApi#create_draft_reply\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete draft
    # Delete a draft message.
    # @param draft_id [String] The draft ID
    # @param [Hash] opts the optional parameters
    # @option opts [DeleteDraft] :delete_draft 
    # @return [nil]
    def delete_draft(draft_id, opts = {})
      delete_draft_with_http_info(draft_id, opts)
      nil
    end

    # Delete draft
    # Delete a draft message.
    # @param draft_id [String] The draft ID
    # @param [Hash] opts the optional parameters
    # @option opts [DeleteDraft] :delete_draft 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_draft_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DraftsApi.delete_draft ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling DraftsApi.delete_draft"
      end
      # resource path
      local_var_path = '/drafts/{draft_id}'.sub('{' + 'draft_id' + '}', CGI.escape(draft_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'delete_draft'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"DraftsApi.delete_draft",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DraftsApi#delete_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit draft
    # Edit a draft message.
    # @param message_id [String] The draft ID
    # @param [Hash] opts the optional parameters
    # @option opts [EditDraft] :edit_draft 
    # @return [MessageResponse]
    def edit_draft(message_id, opts = {})
      data, _status_code, _headers = edit_draft_with_http_info(message_id, opts)
      data
    end

    # Edit draft
    # Edit a draft message.
    # @param message_id [String] The draft ID
    # @param [Hash] opts the optional parameters
    # @option opts [EditDraft] :edit_draft 
    # @return [Array<(MessageResponse, Integer, Hash)>] MessageResponse data, response status code and response headers
    def edit_draft_with_http_info(message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DraftsApi.edit_draft ...'
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling DraftsApi.edit_draft"
      end
      # resource path
      local_var_path = '/drafts/{message_id}/'.sub('{' + 'message_id' + '}', CGI.escape(message_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'edit_draft'])

      # return_type
      return_type = opts[:debug_return_type] || 'MessageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"DraftsApi.edit_draft",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DraftsApi#edit_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List conversation drafts
    # List the drafts in a conversation.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @return [ListConversationDrafts200Response]
    def list_conversation_drafts(conversation_id, opts = {})
      data, _status_code, _headers = list_conversation_drafts_with_http_info(conversation_id, opts)
      data
    end

    # List conversation drafts
    # List the drafts in a conversation.
    # @param conversation_id [String] The conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListConversationDrafts200Response, Integer, Hash)>] ListConversationDrafts200Response data, response status code and response headers
    def list_conversation_drafts_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DraftsApi.list_conversation_drafts ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling DraftsApi.list_conversation_drafts"
      end
      # resource path
      local_var_path = '/conversations/{conversation_id}/drafts'.sub('{' + 'conversation_id' + '}', CGI.escape(conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListConversationDrafts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['http']

      new_options = opts.merge(
        :operation => :"DraftsApi.list_conversation_drafts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DraftsApi#list_conversation_drafts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
