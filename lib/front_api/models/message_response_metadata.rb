=begin
#Core API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module FrontApi
  # Optional metadata about the message
  class MessageResponseMetadata
    # For `intercom` messages only. URL of the Intercom conversation the message is coming from.
    attr_accessor :intercom_url

    # For `truly-call` messages only. Length of the call in seconds.
    attr_accessor :duration

    # For `truly-call` messages only. Whether or not the call have been answered.
    attr_accessor :have_been_answered

    # For `tweet` or 'custom' (partner channel token authenticated) messages only. Unique message identifier in the underlying provider (Twitter or Partner). For custom messages, only present for partner channel token authenticated requests.
    attr_accessor :external_id

    # For `tweet` messages only. URL of the tweet.
    attr_accessor :twitter_url

    # For `tweet` messages only. Whether or not the tweet is a retweet.
    attr_accessor :is_retweet

    # For `tweet` messages only. Whether or not the tweet have been retweeted.
    attr_accessor :have_been_retweeted

    # For `tweet` messages only. Whether or not the tweet have been favorited.
    attr_accessor :have_been_favorited

    # For `custom` messages only. Custom reference which is used to thread messages.
    attr_accessor :thread_ref

    # For `custom` messages only. Custom object holding internal information.
    attr_accessor :headers

    # For `front_chat` messages only. Source URL from the chat widget when sending a message.
    attr_accessor :chat_visitor_url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'intercom_url' => :'intercom_url',
        :'duration' => :'duration',
        :'have_been_answered' => :'have_been_answered',
        :'external_id' => :'external_id',
        :'twitter_url' => :'twitter_url',
        :'is_retweet' => :'is_retweet',
        :'have_been_retweeted' => :'have_been_retweeted',
        :'have_been_favorited' => :'have_been_favorited',
        :'thread_ref' => :'thread_ref',
        :'headers' => :'headers',
        :'chat_visitor_url' => :'chat_visitor_url'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'intercom_url' => :'String',
        :'duration' => :'Integer',
        :'have_been_answered' => :'Boolean',
        :'external_id' => :'String',
        :'twitter_url' => :'String',
        :'is_retweet' => :'Boolean',
        :'have_been_retweeted' => :'Boolean',
        :'have_been_favorited' => :'Boolean',
        :'thread_ref' => :'String',
        :'headers' => :'Object',
        :'chat_visitor_url' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FrontApi::MessageResponseMetadata` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FrontApi::MessageResponseMetadata`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'intercom_url')
        self.intercom_url = attributes[:'intercom_url']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'have_been_answered')
        self.have_been_answered = attributes[:'have_been_answered']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'twitter_url')
        self.twitter_url = attributes[:'twitter_url']
      end

      if attributes.key?(:'is_retweet')
        self.is_retweet = attributes[:'is_retweet']
      end

      if attributes.key?(:'have_been_retweeted')
        self.have_been_retweeted = attributes[:'have_been_retweeted']
      end

      if attributes.key?(:'have_been_favorited')
        self.have_been_favorited = attributes[:'have_been_favorited']
      end

      if attributes.key?(:'thread_ref')
        self.thread_ref = attributes[:'thread_ref']
      end

      if attributes.key?(:'headers')
        self.headers = attributes[:'headers']
      end

      if attributes.key?(:'chat_visitor_url')
        self.chat_visitor_url = attributes[:'chat_visitor_url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          intercom_url == o.intercom_url &&
          duration == o.duration &&
          have_been_answered == o.have_been_answered &&
          external_id == o.external_id &&
          twitter_url == o.twitter_url &&
          is_retweet == o.is_retweet &&
          have_been_retweeted == o.have_been_retweeted &&
          have_been_favorited == o.have_been_favorited &&
          thread_ref == o.thread_ref &&
          headers == o.headers &&
          chat_visitor_url == o.chat_visitor_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [intercom_url, duration, have_been_answered, external_id, twitter_url, is_retweet, have_been_retweeted, have_been_favorited, thread_ref, headers, chat_visitor_url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FrontApi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
