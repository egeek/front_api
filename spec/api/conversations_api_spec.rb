=begin
#Core API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'spec_helper'
require 'json'

# Unit tests for FrontApi::ConversationsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ConversationsApi' do
  before do
    # run before each test
    @api_instance = FrontApi::ConversationsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ConversationsApi' do
    it 'should create an instance of ConversationsApi' do
      expect(@api_instance).to be_instance_of(FrontApi::ConversationsApi)
    end
  end

  # unit tests for add_conversation_followers
  # Add conversation followers
  # Adds teammates to the list of followers of a conversation.
  # @param conversation_id The conversation ID
  # @param [Hash] opts the optional parameters
  # @option opts [AddConversationFollowersRequest] :add_conversation_followers_request 
  # @return [nil]
  describe 'add_conversation_followers test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for add_conversation_link
  # Add conversation link
  # Adds one or more links to a conversation
  # @param conversation_id The conversation ID
  # @param [Hash] opts the optional parameters
  # @option opts [AddConversationLinkRequest] :add_conversation_link_request 
  # @return [nil]
  describe 'add_conversation_link test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for add_conversation_tag
  # Add conversation tag
  # Adds one or more tags to a conversation
  # @param conversation_id The conversation ID
  # @param [Hash] opts the optional parameters
  # @option opts [TagIds] :tag_ids Tag IDs to add
  # @return [nil]
  describe 'add_conversation_tag test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_conversation
  # Create discussion conversation
  # Create a new [conversation](https://dev.frontapp.com/reference/conversations#creating-a-new-conversation) that only supports comments (known as discussions in Front). If you want to create a conversation that supports messages, use the [Create message](https://dev.frontapp.com/reference/post_channels-channel-id-messages) endpoint. If you want to add a comment to an existing conversation, use the [Add comment](https://dev.frontapp.com/reference/post_conversations-conversation-id-comments) endpoint.
  # @param [Hash] opts the optional parameters
  # @option opts [CreateConversation] :create_conversation 
  # @return [ConversationResponse]
  describe 'create_conversation test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_conversation_followers
  # Delete conversation followers
  # Removes teammates from the list of followers of a conversation.
  # @param conversation_id The conversation ID
  # @param [Hash] opts the optional parameters
  # @option opts [DeleteConversationFollowersRequest] :delete_conversation_followers_request 
  # @return [nil]
  describe 'delete_conversation_followers test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_conversation_by_id
  # Get conversation
  # Fetch a conversation. 
  # @param conversation_id The conversation ID
  # @param [Hash] opts the optional parameters
  # @return [ConversationResponse]
  describe 'get_conversation_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_conversation_events
  # List conversation events
  # List the events that occured for a conversation in reverse chronological order (newest first). The order will respect your company&#39;s [bump settings](https://help.front.com/t/y729th/customize-when-conversations-bump-up), which determine when conversations bump to the top.
  # @param conversation_id The conversation ID
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Max number of results per [page](https://dev.frontapp.com/docs/pagination)
  # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
  # @return [ListConversationEvents200Response]
  describe 'list_conversation_events test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_conversation_followers
  # List conversation followers
  # List the teammates following a conversation.
  # @param conversation_id The conversation ID
  # @param [Hash] opts the optional parameters
  # @return [ListCommentMentions200Response]
  describe 'list_conversation_followers test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_conversation_inboxes
  # List conversation inboxes
  # List the inboxes in which a conversation is listed.
  # @param conversation_id The conversation ID
  # @param [Hash] opts the optional parameters
  # @return [ListConversationInboxes200Response]
  describe 'list_conversation_inboxes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_conversation_messages
  # List conversation messages
  # List the messages in a conversation in reverse chronological order (newest first).
  # @param conversation_id The conversation ID
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Max number of results per [page](https://dev.frontapp.com/docs/pagination)
  # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
  # @option opts [String] :sort_by Field used to sort the messages. Only supports &#x60;created_at&#x60;.
  # @option opts [String] :sort_order Order by which results should be sorted
  # @return [ListConversationDrafts200Response]
  describe 'list_conversation_messages test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_conversations
  # List conversations
  # List the conversations in the company in reverse chronological order (most recently updated first). The order will respect your company&#39;s [bump settings](https://help.front.com/t/y729th/customize-when-conversations-bump-up), which determine when conversations bump to the top. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :q [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property &#x60;statuses&#x60;, whose value should be a list of conversation statuses (&#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;archived&#x60;, or &#x60;deleted&#x60;).
  # @option opts [Integer] :limit Max number of results per [page](https://dev.frontapp.com/docs/pagination)
  # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
  # @option opts [String] :sort_by Field used to sort the conversations. Only supports &#x60;date&#x60;.
  # @option opts [String] :sort_order Order by which results should be sorted
  # @return [ListContactConversations200Response]
  describe 'list_conversations test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for remove_conversation_links
  # Remove conversation links
  # Removes one or more links to a conversation
  # @param conversation_id The conversation ID
  # @param [Hash] opts the optional parameters
  # @option opts [RemoveConversationLinksRequest] :remove_conversation_links_request 
  # @return [nil]
  describe 'remove_conversation_links test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for remove_conversation_tag
  # Remove conversation tag
  # Removes one or more tags to a conversation
  # @param conversation_id The conversation ID
  # @param [Hash] opts the optional parameters
  # @option opts [TagIds] :tag_ids Tag IDs to remove
  # @return [nil]
  describe 'remove_conversation_tag test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for search_conversations
  # Search conversations
  # Search for conversations. Response will include a count of total matches and an array of conversations in descending order by last activity. See the [search syntax documentation](https://dev.frontapp.com/docs/search-1) for usage examples. **Note:** This endpoint is subject to [proportional rate limiting](https://dev.frontapp.com/docs/rate-limiting#additional-proportional-limiting) at 40% of your company&#39;s rate limit. 
  # @param query Search query string. See [Search](https://dev.frontapp.com/docs/search-1) topic for usage details.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Max number of results per [page](https://dev.frontapp.com/docs/pagination)
  # @option opts [String] :page_token Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
  # @return [SearchConversations200Response]
  describe 'search_conversations test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_conversation
  # Update conversation
  # Update a conversation.
  # @param conversation_id The conversation ID
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateConversation] :update_conversation 
  # @return [nil]
  describe 'update_conversation test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_conversation_assignee
  # Update conversation assignee
  # Assign or unassign a conversation.
  # @param conversation_id The conversation ID
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateConversationAssignee] :update_conversation_assignee 
  # @return [nil]
  describe 'update_conversation_assignee test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_conversation_reminders
  # Update conversation reminders
  # Snooze or unsnooze a conversation for the provided user. For private conversations, reminders can only be created and edited through the API for teammates that own the conversation. For shared conversations, reminders created and edited through the API are shared for all teammates within the shared inbox(es) that the conversation belongs to. 
  # @param conversation_id The conversation ID
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateConversationReminders] :update_conversation_reminders 
  # @return [nil]
  describe 'update_conversation_reminders test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
